{"file_contents":{"DEPLOYMENT.md":{"content":"# Chai-Fi Deployment Guide\n\n## Quick Deployment to Vercel\n\n### Prerequisites\n- MongoDB Atlas account and cluster\n- Git repository (GitHub, GitLab, or Bitbucket)\n- Vercel account (free at vercel.com)\n\n### Step-by-Step Deployment\n\n#### 1. Prepare Your Repository\n```bash\n# Ensure your code is committed and pushed\ngit add .\ngit commit -m \"Ready for deployment\"\ngit push origin main\n","size_bytes":380},"MONGODB_SETUP.md":{"content":"# MongoDB Atlas Setup Guide for Chai-Fi\n\n## Step-by-Step MongoDB Atlas Configuration\n\n### 1. Account Creation\n1. Visit https://www.mongodb.com/cloud/atlas\n2. Click **\"Try Free\"**\n3. Sign up with email or Google/GitHub account\n4. Verify your email address\n\n### 2. Create Your First Cluster\n\n#### Choose Cloud Provider & Region\n1. Select **\"Shared Clusters\"** (Free Tier)\n2. Choose **Cloud Provider**: AWS (recommended)\n3. Select **Region**: Closest to your users\n4. Keep default cluster name or rename to `chai-fi-cluster`\n\n#### Cluster Configuration\n- **Cluster Tier**: M0 Sandbox (Free Forever)\n- **Additional Settings**: Leave defaults\n- **Cluster Name**: `chai-fi-cluster`\n- Click **\"Create Cluster\"**\n\n⏱️ **Wait Time**: 3-5 minutes for cluster creation\n\n### 3. Database Access Configuration\n\n#### Create Database User\n1. Click **\"Database Access\"** in left sidebar\n2. Click **\"Add New Database User\"**\n3. **Authentication Method**: Password\n4. **Username**: `chai-fi-admin`\n5. **Password**: Click \"Autogenerate Secure Password\" or create your own\n   - ⚠️ **Save this password securely!**\n6. **Database User Privileges**: \n   - Select **\"Read and write to any database\"**\n7. Click **\"Add User\"**\n\n#### User Configuration Example\n","size_bytes":1240},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nChai-Fi is a modern billing web application specifically designed for cafes, tea shops, and small restaurants. It provides a complete point-of-sale solution with a React frontend, Express.js backend, and flexible data storage supporting both MongoDB Atlas cloud database and in-memory fallback. The application features a splash page, secure admin authentication, dynamic menu management, payment processing (GPay/Cash), invoice generation with PDF export, and comprehensive analytics with daily, weekly, and monthly reports.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client uses React 18 with TypeScript in a single-page application (SPA) architecture. Wouter provides lightweight client-side routing, while TanStack Query handles server state management with caching and synchronization. The UI is built with Radix UI components and styled using Tailwind CSS following a design system with custom CSS variables. The application follows a page-based structure with components for splash, login, menu, payment, invoice, and dashboard views.\n\n## Backend Architecture\nThe server implements a REST API using Express.js with TypeScript. Routes are organized by functionality (auth, menu, transactions, summaries) with proper error handling middleware. The application uses a storage abstraction layer that allows switching between MongoDB Atlas and in-memory storage based on environment configuration. Session management and authentication use simple username/password validation with localStorage tokens on the frontend.\n\n## Build System and Development\nVite serves as the build tool with hot module replacement in development. The project uses ESBuild for server-side bundling and supports both development and production builds. TypeScript configuration enables strict type checking across client, server, and shared code. The monorepo structure with shared schema ensures type safety between frontend and backend.\n\n## Data Storage Solutions\nThe application implements a dual-storage strategy using a common interface (IStorage). MongoDB Atlas serves as the primary production database with automatic failover to MemStorage (in-memory) if connection fails. The data model includes collections for users, menu items, transactions, and time-based summaries (daily, weekly, monthly). Drizzle ORM provides type-safe database operations with PostgreSQL schema definitions that can be adapted for MongoDB.\n\n## Authentication and Authorization\nAuthentication uses fixed credentials (Username: \"Chai-fi\", Password: \"Chai-fi@2025\") stored in the database. The system generates simple tokens stored in localStorage for session persistence. All protected routes validate the presence of auth tokens, though the current implementation is basic and suitable for single-admin scenarios.\n\n## External Dependencies\nThe application integrates jsPDF for client-side invoice and report generation. Vercel provides the deployment platform with specific configuration for serverless functions. The project uses shadcn/ui component library built on Radix UI primitives for accessible, customizable interface components. Development includes Replit-specific plugins for runtime error handling and debugging.\n\n## Payment Processing\nPayment handling supports both GPay and Cash methods with manual total adjustments. The system tracks payment methods in transaction records and generates summaries segmented by payment type. Invoice generation creates professional PDF documents with company branding and transaction details.\n\n## Analytics and Reporting\nThe system automatically generates daily, weekly, and monthly summaries with GPay vs Cash breakdowns. All reports can be exported as PDF documents with professional formatting. The dashboard provides real-time analytics with downloadable reports for different time periods.","size_bytes":3904},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2113},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTransactionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      res.json({ user: { id: user.id, username: user.username } });\n    } catch (error) {\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Menu Items\n  app.get(\"/api/menu\", async (req, res) => {\n    try {\n      const items = await storage.getMenuItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.get(\"/api/menu/:id\", async (req, res) => {\n    try {\n      const item = await storage.getMenuItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ error: \"Menu item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch menu item\" });\n    }\n  });\n\n  app.post(\"/api/menu\", async (req, res) => {\n    try {\n      const { name, description, price, category, image, available } = req.body;\n      const newItem = await storage.createMenuItem({\n        name,\n        description,\n        price,\n        category,\n        image,\n        available: available ?? true\n      });\n      res.json(newItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create menu item\" });\n    }\n  });\n\n  app.put(\"/api/menu/:id\", async (req, res) => {\n    try {\n      const { name, description, price, category, image, available } = req.body;\n      const updatedItem = await storage.updateMenuItem(req.params.id, {\n        name,\n        description,\n        price,\n        category,\n        image,\n        available\n      });\n      if (!updatedItem) {\n        return res.status(404).json({ error: \"Menu item not found\" });\n      }\n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update menu item\" });\n    }\n  });\n\n  app.delete(\"/api/menu/:id\", async (req, res) => {\n    try {\n      const item = await storage.getMenuItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ error: \"Menu item not found\" });\n      }\n      \n      // For now, we'll just mark the item as unavailable since there's no delete method\n      const updatedItem = await storage.updateMenuItem(req.params.id, { available: false });\n      res.json({ message: \"Menu item marked as unavailable\", item: updatedItem });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete menu item\" });\n    }\n  });\n\n  // Transactions\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const validatedData = insertTransactionSchema.parse(req.body);  // ← error likely here\n      const transaction = await storage.createTransaction(validatedData);\n      res.json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid transaction data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create transaction\" });\n    }\n  });\n  \n\n  app.get(\"/api/transactions\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const transactions = await storage.getTransactions(limit);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/transactions/date/:date\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactionsByDate(req.params.date);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions for date\" });\n    }\n  });\n\n  // Daily Summaries\n  app.get(\"/api/summaries/daily\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const summaries = await storage.getDailySummaries(limit);\n      res.json(summaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch daily summaries\" });\n    }\n  });\n\n  app.get(\"/api/summaries/daily/:date\", async (req, res) => {\n    try {\n      const summary = await storage.getDailySummary(req.params.date);\n      if (!summary) {\n        return res.status(404).json({ error: \"Daily summary not found\" });\n      }\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch daily summary\" });\n    }\n  });\n\n  // Weekly Summaries\n  app.get(\"/api/summaries/weekly\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const summaries = await storage.getWeeklySummaries(limit);\n      res.json(summaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch weekly summaries\" });\n    }\n  });\n\n  // Monthly Summaries\n  app.get(\"/api/summaries/monthly\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const summaries = await storage.getMonthlySummaries(limit);\n      res.json(summaries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch monthly summaries\" });\n    }\n  });\n\n  // Creditor summary endpoint\n  app.get(\"/api/creditors/summary\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactions();\n      const creditorTransactions = transactions.filter(t => \n        t.paymentMethod === 'creditor' && t.creditor\n      );\n      \n      const creditorSummary = creditorTransactions.reduce((acc: any, transaction) => {\n        const creditor = transaction.creditor as any;\n        if (!creditor || !creditor.name) return acc;\n        \n        if (!acc[creditor.name]) {\n          acc[creditor.name] = {\n            name: creditor.name,\n            totalAmount: 0,\n            paidAmount: 0,\n            balanceAmount: 0,\n            transactionCount: 0\n          };\n        }\n        \n        acc[creditor.name].totalAmount += creditor.totalAmount || 0;\n        acc[creditor.name].paidAmount += creditor.paidAmount || 0;\n        acc[creditor.name].balanceAmount += creditor.balanceAmount || 0;\n        acc[creditor.name].transactionCount += 1;\n        \n        return acc;\n      }, {});\n      \n      res.json(Object.values(creditorSummary));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch creditor summary\" });\n    }\n  });\n\n  // Menu item sales endpoint\n  app.get(\"/api/menu/sales\", async (req, res) => {\n    try {\n      const date = req.query.date as string || new Date().toISOString().split('T')[0];\n      const transactions = await storage.getTransactionsByDate(date);\n      const menuItems = await storage.getMenuItems();\n      \n      const salesData = menuItems.map(item => {\n        const totalSold = transactions.reduce((count, transaction) => {\n          const items = transaction.items as any[];\n          const itemSold = items.find(i => i.id === item.id);\n          return count + (itemSold ? itemSold.quantity : 0);\n        }, 0);\n        \n        return {\n          id: item.id,\n          name: item.name,\n          category: item.category,\n          price: item.price,\n          totalSold,\n          revenue: totalSold * parseFloat(item.price)\n        };\n      });\n      \n      res.json(salesData.sort((a, b) => b.totalSold - a.totalSold));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch menu item sales\" });\n    }\n  });\n\n  // Clear data endpoint\n  app.delete(\"/api/data/clear\", async (req, res) => {\n    try {\n      const { period, date } = req.query;\n      \n      if (period === 'day' && date) {\n        await storage.clearDataByDay(date as string);\n        res.json({ message: `Cleared data for ${date}` });\n      } else if (period === 'week' && date) {\n        await storage.clearDataByWeek(date as string);\n        res.json({ message: `Cleared weekly data starting ${date}` });\n      } else if (period === 'month' && date) {\n        await storage.clearDataByMonth(date as string);\n        res.json({ message: `Cleared monthly data for ${date}` });\n      } else {\n        res.status(400).json({ error: \"Invalid parameters. Required: period (day/week/month) and date\" });\n      }\n    } catch (error) {\n      console.error(\"Clear data error:\", error);\n      res.status(500).json({ error: \"Failed to clear data\" });\n    }\n  });\n\n  // PDF Download endpoints\n  app.get(\"/api/download/daily/:date\", async (req, res) => {\n    try {\n      const summary = await storage.getDailySummary(req.params.date);\n      const transactions = await storage.getTransactionsByDate(req.params.date);\n      \n      if (!summary) {\n        return res.status(404).json({ error: \"Daily summary not found\" });\n      }\n\n      res.json({ summary, transactions });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch daily data\" });\n    }\n  });\n\n  app.get(\"/api/download/weekly/:weekStart\", async (req, res) => {\n    try {\n      const summary = await storage.getWeeklySummary(req.params.weekStart);\n      \n      if (!summary) {\n        return res.status(404).json({ error: \"Weekly summary not found\" });\n      }\n\n      const transactions = await storage.getTransactionsByDateRange(\n        summary.weekStart,\n        summary.weekEnd\n      );\n\n      res.json({ summary, transactions });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch weekly data\" });\n    }\n  });\n\n  app.get(\"/api/download/monthly/:month\", async (req, res) => {\n    try {\n      const summary = await storage.getMonthlySummary(req.params.month);\n      \n      if (!summary) {\n        return res.status(404).json({ error: \"Monthly summary not found\" });\n      }\n\n      const startDate = `${req.params.month}-01`;\n      const endDate = `${req.params.month}-31`;\n      const transactions = await storage.getTransactionsByDateRange(startDate, endDate);\n\n      res.json({ summary, transactions });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch monthly data\" });\n    }\n  });\n\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10541},"server/storage.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport { type User, type InsertUser, type MenuItem, type InsertMenuItem, type Transaction, type InsertTransaction, type DailySummary, type InsertDailySummary, type WeeklySummary, type InsertWeeklySummary, type MonthlySummary, type InsertMonthlySummary } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { MongoStorage } from \"./db/mongodb\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Menu Items\n  getMenuItems(): Promise<MenuItem[]>;\n  getMenuItem(id: string): Promise<MenuItem | undefined>;\n  createMenuItem(item: InsertMenuItem): Promise<MenuItem>;\n  updateMenuItem(id: string, item: Partial<MenuItem>): Promise<MenuItem | undefined>;\n\n  // Transactions\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactions(limit?: number): Promise<Transaction[]>;\n  getTransactionsByDate(date: string): Promise<Transaction[]>;\n  getTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]>;\n\n  // Daily Summaries\n  createDailySummary(summary: InsertDailySummary): Promise<DailySummary>;\n  getDailySummary(date: string): Promise<DailySummary | undefined>;\n  getDailySummaries(limit?: number): Promise<DailySummary[]>;\n\n  // Weekly Summaries\n  createWeeklySummary(summary: InsertWeeklySummary): Promise<WeeklySummary>;\n  getWeeklySummary(weekStart: string): Promise<WeeklySummary | undefined>;\n  getWeeklySummaries(limit?: number): Promise<WeeklySummary[]>;\n\n  // Monthly Summaries\n  createMonthlySummary(summary: InsertMonthlySummary): Promise<MonthlySummary>;\n  getMonthlySummary(month: string): Promise<MonthlySummary | undefined>;\n  getMonthlySummaries(limit?: number): Promise<MonthlySummary[]>;\n\n  // Clear data methods\n  clearDataByDay(date: string): Promise<void>;\n  clearDataByWeek(weekStart: string): Promise<void>;\n  clearDataByMonth(month: string): Promise<void>;\n\n  // MongoDB connection methods\n  connect?(): Promise<void>;\n  disconnect?(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private menuItems: Map<string, MenuItem>;\n  private transactions: Map<string, Transaction>;\n  private dailySummaries: Map<string, DailySummary>;\n  private weeklySummaries: Map<string, WeeklySummary>;\n  private monthlySummaries: Map<string, MonthlySummary>;\n\n  constructor() {\n    this.users = new Map();\n    this.menuItems = new Map();\n    this.transactions = new Map();\n    this.dailySummaries = new Map();\n    this.weeklySummaries = new Map();\n    this.monthlySummaries = new Map();\n\n    // Initialize default users\n    this.createUser({ username: \"Inowara\", password: \"Inowara@2025\" }); // Admin user\n    this.createUser({ username: \"Chai-fi\", password: \"Chai-fi@2025\" }); // Regular user\n\n    // Initialize menu items\n    this.initializeMenuItems();\n  }\n\n  private async initializeMenuItems() {\n    const defaultItems: InsertMenuItem[] = [\n      {\n        name: \"Masala Chai\",\n        description: \"Traditional spiced tea\",\n        price: \"25.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1571934811356-5cc061b6821f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Green Tea\",\n        description: \"Healthy herbal tea\",\n        price: \"30.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Cappuccino\",\n        description: \"Rich coffee with foam\",\n        price: \"80.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1509042239860-f550ce710b93?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Black Coffee\",\n        description: \"Strong black coffee\",\n        price: \"50.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1447933601403-0c6688de566e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Samosa\",\n        description: \"Crispy fried snack\",\n        price: \"20.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1601050690597-df0568f70950?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Veg Sandwich\",\n        description: \"Fresh vegetable sandwich\",\n        price: \"60.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1509722747041-616f39b57569?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Orange Juice\",\n        description: \"Fresh squeezed orange\",\n        price: \"40.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Mango Lassi\",\n        description: \"Sweet yogurt drink\",\n        price: \"45.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1571091718767-18b5b1457add?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n    ];\n\n    for (const item of defaultItems) {\n      await this.createMenuItem(item);\n    }\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Menu Items\n  async getMenuItems(): Promise<MenuItem[]> {\n    return Array.from(this.menuItems.values());\n  }\n\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    return this.menuItems.get(id);\n  }\n\n  async createMenuItem(insertItem: InsertMenuItem): Promise<MenuItem> {\n    const id = randomUUID();\n    const item: MenuItem = { ...insertItem, id };\n    this.menuItems.set(id, item);\n    return item;\n  }\n\n  async updateMenuItem(id: string, updateData: Partial<MenuItem>): Promise<MenuItem | undefined> {\n    const existing = this.menuItems.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateData };\n    this.menuItems.set(id, updated);\n    return updated;\n  }\n\n  // Transactions\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const now = new Date();\n    const transaction: Transaction = { \n      ...insertTransaction, \n      id,\n      createdAt: now\n    };\n    this.transactions.set(id, transaction);\n\n    // Update summaries\n    await this.updateSummaries(transaction);\n\n    return transaction;\n  }\n\n  async getTransactions(limit?: number): Promise<Transaction[]> {\n    const transactions = Array.from(this.transactions.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    \n    return limit ? transactions.slice(0, limit) : transactions;\n  }\n\n  async getTransactionsByDate(date: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.date === date)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.date >= startDate && t.date <= endDate)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  // Daily Summaries\n  async createDailySummary(insertSummary: InsertDailySummary): Promise<DailySummary> {\n    const id = randomUUID();\n    const summary: DailySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    this.dailySummaries.set(insertSummary.date, summary);\n    return summary;\n  }\n\n  async getDailySummary(date: string): Promise<DailySummary | undefined> {\n    return this.dailySummaries.get(date);\n  }\n\n  async getDailySummaries(limit?: number): Promise<DailySummary[]> {\n    const summaries = Array.from(this.dailySummaries.values())\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    return limit ? summaries.slice(0, limit) : summaries;\n  }\n\n  // Weekly Summaries\n  async createWeeklySummary(insertSummary: InsertWeeklySummary): Promise<WeeklySummary> {\n    const id = randomUUID();\n    const summary: WeeklySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    this.weeklySummaries.set(insertSummary.weekStart, summary);\n    return summary;\n  }\n\n  async getWeeklySummary(weekStart: string): Promise<WeeklySummary | undefined> {\n    return this.weeklySummaries.get(weekStart);\n  }\n\n  async getWeeklySummaries(limit?: number): Promise<WeeklySummary[]> {\n    const summaries = Array.from(this.weeklySummaries.values())\n      .sort((a, b) => new Date(b.weekStart).getTime() - new Date(a.weekStart).getTime());\n    \n    return limit ? summaries.slice(0, limit) : summaries;\n  }\n\n  // Monthly Summaries\n  async createMonthlySummary(insertSummary: InsertMonthlySummary): Promise<MonthlySummary> {\n    const id = randomUUID();\n    const summary: MonthlySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    this.monthlySummaries.set(insertSummary.month, summary);\n    return summary;\n  }\n\n  async getMonthlySummary(month: string): Promise<MonthlySummary | undefined> {\n    return this.monthlySummaries.get(month);\n  }\n\n  async getMonthlySummaries(limit?: number): Promise<MonthlySummary[]> {\n    const summaries = Array.from(this.monthlySummaries.values())\n      .sort((a, b) => new Date(b.month + '-01').getTime() - new Date(a.month + '-01').getTime());\n    \n    return limit ? summaries.slice(0, limit) : summaries;\n  }\n\n  private async updateSummaries(transaction: Transaction) {\n    let gpayAmount = 0;\n    let cashAmount = 0;\n\n    if (transaction.paymentMethod === 'gpay') {\n      gpayAmount = parseFloat(transaction.totalAmount);\n    } else if (transaction.paymentMethod === 'cash') {\n      cashAmount = parseFloat(transaction.totalAmount);\n    } else if (transaction.paymentMethod === 'split' && transaction.splitPayment) {\n      gpayAmount = transaction.splitPayment.gpayAmount || 0;\n      cashAmount = transaction.splitPayment.cashAmount || 0;\n    }\n\n    // Update daily summary\n    const existingDaily = await this.getDailySummary(transaction.date);\n    if (existingDaily) {\n      existingDaily.totalAmount = (parseFloat(existingDaily.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      existingDaily.gpayAmount = (parseFloat(existingDaily.gpayAmount) + gpayAmount).toFixed(2);\n      existingDaily.cashAmount = (parseFloat(existingDaily.cashAmount) + cashAmount).toFixed(2);\n      existingDaily.orderCount += 1;\n      this.dailySummaries.set(transaction.date, existingDaily);\n    } else {\n      await this.createDailySummary({\n        date: transaction.date,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    // Update weekly summary\n    const weekStart = this.getWeekStart(new Date(transaction.date));\n    const weekEnd = this.getWeekEnd(new Date(transaction.date));\n    const existingWeekly = await this.getWeeklySummary(weekStart);\n    if (existingWeekly) {\n      existingWeekly.totalAmount = (parseFloat(existingWeekly.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      existingWeekly.gpayAmount = (parseFloat(existingWeekly.gpayAmount) + gpayAmount).toFixed(2);\n      existingWeekly.cashAmount = (parseFloat(existingWeekly.cashAmount) + cashAmount).toFixed(2);\n      existingWeekly.orderCount += 1;\n      this.weeklySummaries.set(weekStart, existingWeekly);\n    } else {\n      await this.createWeeklySummary({\n        weekStart,\n        weekEnd,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    // Update monthly summary\n    const month = transaction.date.substring(0, 7); // YYYY-MM\n    const existingMonthly = await this.getMonthlySummary(month);\n    if (existingMonthly) {\n      existingMonthly.totalAmount = (parseFloat(existingMonthly.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      existingMonthly.gpayAmount = (parseFloat(existingMonthly.gpayAmount) + gpayAmount).toFixed(2);\n      existingMonthly.cashAmount = (parseFloat(existingMonthly.cashAmount) + cashAmount).toFixed(2);\n      existingMonthly.orderCount += 1;\n      this.monthlySummaries.set(month, existingMonthly);\n    } else {\n      await this.createMonthlySummary({\n        month,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n  }\n\n  private getWeekStart(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n    const monday = new Date(date.setDate(diff));\n    return monday.toISOString().split('T')[0];\n  }\n\n  private getWeekEnd(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? 0 : 7); // Adjust when day is Sunday\n    const sunday = new Date(date.setDate(diff));\n    return sunday.toISOString().split('T')[0];\n  }\n\n  // Clear data methods\n  async clearDataByDay(date: string): Promise<void> {\n    // Remove transactions for the specific date\n    const transactionsToDelete = Array.from(this.transactions.entries())\n      .filter(([_, transaction]) => transaction.date === date)\n      .map(([id, _]) => id);\n    \n    transactionsToDelete.forEach(id => this.transactions.delete(id));\n    \n    // Remove daily summary for the date\n    this.dailySummaries.delete(date);\n    \n    // Update weekly and monthly summaries by recalculating\n    await this.recalculateWeeklySummary(date);\n    await this.recalculateMonthlySummary(date);\n  }\n\n  async clearDataByWeek(weekStart: string): Promise<void> {\n    const weekEnd = this.getWeekEnd(new Date(weekStart));\n    \n    // Remove transactions for the week\n    const transactionsToDelete = Array.from(this.transactions.entries())\n      .filter(([_, transaction]) => transaction.date >= weekStart && transaction.date <= weekEnd)\n      .map(([id, _]) => id);\n    \n    transactionsToDelete.forEach(id => this.transactions.delete(id));\n    \n    // Remove daily summaries for the week\n    const dailySummariesToDelete = Array.from(this.dailySummaries.entries())\n      .filter(([date, _]) => date >= weekStart && date <= weekEnd)\n      .map(([date, _]) => date);\n    \n    dailySummariesToDelete.forEach(date => this.dailySummaries.delete(date));\n    \n    // Remove weekly summary\n    this.weeklySummaries.delete(weekStart);\n    \n    // Update monthly summary by recalculating\n    await this.recalculateMonthlySummary(weekStart);\n  }\n\n  async clearDataByMonth(month: string): Promise<void> {\n    const startDate = `${month}-01`;\n    const endDate = `${month}-31`;\n    \n    // Remove transactions for the month\n    const transactionsToDelete = Array.from(this.transactions.entries())\n      .filter(([_, transaction]) => transaction.date.startsWith(month))\n      .map(([id, _]) => id);\n    \n    transactionsToDelete.forEach(id => this.transactions.delete(id));\n    \n    // Remove daily summaries for the month\n    const dailySummariesToDelete = Array.from(this.dailySummaries.entries())\n      .filter(([date, _]) => date.startsWith(month))\n      .map(([date, _]) => date);\n    \n    dailySummariesToDelete.forEach(date => this.dailySummaries.delete(date));\n    \n    // Remove weekly summaries that fall within the month\n    const weeklySummariesToDelete = Array.from(this.weeklySummaries.entries())\n      .filter(([weekStart, _]) => weekStart.startsWith(month))\n      .map(([weekStart, _]) => weekStart);\n    \n    weeklySummariesToDelete.forEach(weekStart => this.weeklySummaries.delete(weekStart));\n    \n    // Remove monthly summary\n    this.monthlySummaries.delete(month);\n  }\n\n  private async recalculateWeeklySummary(date: string): Promise<void> {\n    const weekStart = this.getWeekStart(new Date(date));\n    const weekEnd = this.getWeekEnd(new Date(date));\n    \n    const weekTransactions = Array.from(this.transactions.values())\n      .filter(t => t.date >= weekStart && t.date <= weekEnd);\n    \n    if (weekTransactions.length === 0) {\n      this.weeklySummaries.delete(weekStart);\n      return;\n    }\n    \n    const totalAmount = weekTransactions.reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const gpayAmount = weekTransactions\n      .filter(t => t.paymentMethod === 'gpay')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const cashAmount = weekTransactions\n      .filter(t => t.paymentMethod === 'cash')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    \n    await this.createWeeklySummary({\n      weekStart,\n      weekEnd,\n      totalAmount: totalAmount.toFixed(2),\n      gpayAmount: gpayAmount.toFixed(2),\n      cashAmount: cashAmount.toFixed(2),\n      orderCount: weekTransactions.length,\n    });\n  }\n\n  private async recalculateMonthlySummary(date: string): Promise<void> {\n    const month = date.substring(0, 7);\n    \n    const monthTransactions = Array.from(this.transactions.values())\n      .filter(t => t.date.startsWith(month));\n    \n    if (monthTransactions.length === 0) {\n      this.monthlySummaries.delete(month);\n      return;\n    }\n    \n    const totalAmount = monthTransactions.reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const gpayAmount = monthTransactions\n      .filter(t => t.paymentMethod === 'gpay')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const cashAmount = monthTransactions\n      .filter(t => t.paymentMethod === 'cash')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    \n    await this.createMonthlySummary({\n      month,\n      totalAmount: totalAmount.toFixed(2),\n      gpayAmount: gpayAmount.toFixed(2),\n      cashAmount: cashAmount.toFixed(2),\n      orderCount: monthTransactions.length,\n    });\n  }\n}\n\n// MongoDB Storage Implementation\nclass MongoStorage implements IStorage {\n  private connectionString: string;\n  private dbName: string;\n  private client: any;\n  private db: any;\n  private isConnected: boolean = false;\n\n  constructor(connectionString: string, dbName: string = 'chai-fi') {\n    this.connectionString = connectionString;\n    this.dbName = dbName;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      // Import MongoDB at runtime to avoid dependency issues\n      const { MongoClient } = await import('mongodb');\n      \n      this.client = new MongoClient(this.connectionString);\n      await this.client.connect();\n      this.db = this.client.db(this.dbName);\n      this.isConnected = true;\n      \n      console.log('✅ Connected to MongoDB Atlas');\n      await this.initializeDefaultData();\n      await this.createIndexes();\n    } catch (error) {\n      console.error('❌ MongoDB connection failed:', error);\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.client && this.isConnected) {\n      await this.client.close();\n      this.isConnected = false;\n      console.log('Disconnected from MongoDB Atlas');\n    }\n  }\n\n  private async initializeDefaultData(): Promise<void> {\n    // Create default admin user if not exists\n    const existingUser = await this.db.collection('users').findOne({ username: \"Chai-fi\" });\n    if (!existingUser) {\n      await this.createUser({ username: \"Chai-fi\", password: \"Chai-fi@2025\" });\n    }\n\n    // Create default menu items if collection is empty\n    const menuCount = await this.db.collection('menu_items').countDocuments();\n    if (menuCount === 0) {\n      await this.initializeMenuItems();\n    }\n  }\n\n  private async createIndexes(): Promise<void> {\n    await this.db.collection('users').createIndex({ username: 1 }, { unique: true });\n    await this.db.collection('transactions').createIndex({ date: 1 });\n    await this.db.collection('transactions').createIndex({ createdAt: -1 });\n    await this.db.collection('daily_summaries').createIndex({ date: 1 }, { unique: true });\n    await this.db.collection('weekly_summaries').createIndex({ weekStart: 1 }, { unique: true });\n    await this.db.collection('monthly_summaries').createIndex({ month: 1 }, { unique: true });\n  }\n\n  private async initializeMenuItems(): Promise<void> {\n    const defaultItems = [\n      {\n        name: \"Masala Chai\",\n        description: \"Traditional spiced tea\",\n        price: \"25.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1571934811356-5cc061b6821f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Green Tea\",\n        description: \"Healthy herbal tea\",\n        price: \"30.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Cappuccino\",\n        description: \"Rich coffee with foam\",\n        price: \"80.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1509042239860-f550ce710b93?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Black Coffee\",\n        description: \"Strong black coffee\",\n        price: \"50.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1447933601403-0c6688de566e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Samosa\",\n        description: \"Crispy fried snack\",\n        price: \"20.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1601050690597-df0568f70950?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Veg Sandwich\",\n        description: \"Fresh vegetable sandwich\",\n        price: \"60.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1509722747041-616f39b57569?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Orange Juice\",\n        description: \"Fresh squeezed orange\",\n        price: \"40.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Mango Lassi\",\n        description: \"Sweet yogurt drink\",\n        price: \"45.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1571091718767-18b5b1457add?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n    ];\n\n    for (const item of defaultItems) {\n      await this.createMenuItem(item);\n    }\n  }\n\n  // Implementation of all IStorage methods for MongoDB...\n  // (Similar to MemStorage but using MongoDB operations)\n  \n  async getUser(id: string): Promise<User | undefined> {\n    const user = await this.db.collection('users').findOne({ id });\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const user = await this.db.collection('users').findOne({ username });\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    await this.db.collection('users').insertOne(user);\n    return user;\n  }\n\n  async getMenuItems(): Promise<MenuItem[]> {\n    return await this.db.collection('menu_items').find({}).toArray();\n  }\n\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    const item = await this.db.collection('menu_items').findOne({ id });\n    return item || undefined;\n  }\n\n  async createMenuItem(insertItem: InsertMenuItem): Promise<MenuItem> {\n    const id = randomUUID();\n    const item: MenuItem = { ...insertItem, id };\n    await this.db.collection('menu_items').insertOne(item);\n    return item;\n  }\n\n  async updateMenuItem(id: string, updateData: Partial<MenuItem>): Promise<MenuItem | undefined> {\n    const result = await this.db.collection('menu_items').findOneAndUpdate(\n      { id },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    );\n    return result || undefined;\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const now = new Date();\n    const transaction: Transaction = { \n      ...insertTransaction, \n      id,\n      createdAt: now\n    };\n    \n    await this.db.collection('transactions').insertOne(transaction);\n    await this.updateSummaries(transaction);\n    \n    return transaction;\n  }\n\n  async getTransactions(limit?: number): Promise<Transaction[]> {\n    const query = this.db.collection('transactions').find({}).sort({ createdAt: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  async getTransactionsByDate(date: string): Promise<Transaction[]> {\n    return await this.db.collection('transactions')\n      .find({ date })\n      .sort({ createdAt: -1 })\n      .toArray();\n  }\n\n  async getTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]> {\n    return await this.db.collection('transactions')\n      .find({ \n        date: { \n          $gte: startDate, \n          $lte: endDate \n        } \n      })\n      .sort({ createdAt: -1 })\n      .toArray();\n  }\n\n  async createDailySummary(insertSummary: InsertDailySummary): Promise<DailySummary> {\n    const id = randomUUID();\n    const summary: DailySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.db.collection('daily_summaries').insertOne(summary);\n    return summary;\n  }\n\n  async getDailySummary(date: string): Promise<DailySummary | undefined> {\n    const summary = await this.db.collection('daily_summaries').findOne({ date });\n    return summary || undefined;\n  }\n\n  async getDailySummaries(limit?: number): Promise<DailySummary[]> {\n    const query = this.db.collection('daily_summaries').find({}).sort({ date: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  async createWeeklySummary(insertSummary: InsertWeeklySummary): Promise<WeeklySummary> {\n    const id = randomUUID();\n    const summary: WeeklySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.db.collection('weekly_summaries').insertOne(summary);\n    return summary;\n  }\n\n  async getWeeklySummary(weekStart: string): Promise<WeeklySummary | undefined> {\n    const summary = await this.db.collection('weekly_summaries').findOne({ weekStart });\n    return summary || undefined;\n  }\n\n  async getWeeklySummaries(limit?: number): Promise<WeeklySummary[]> {\n    const query = this.db.collection('weekly_summaries').find({}).sort({ weekStart: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  async createMonthlySummary(insertSummary: InsertMonthlySummary): Promise<MonthlySummary> {\n    const id = randomUUID();\n    const summary: MonthlySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.db.collection('monthly_summaries').insertOne(summary);\n    return summary;\n  }\n\n  async getMonthlySummary(month: string): Promise<MonthlySummary | undefined> {\n    const summary = await this.db.collection('monthly_summaries').findOne({ month });\n    return summary || undefined;\n  }\n\n  async getMonthlySummaries(limit?: number): Promise<MonthlySummary[]> {\n    const query = this.db.collection('monthly_summaries').find({}).sort({ month: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  private async updateSummaries(transaction: Transaction): Promise<void> {\n    const gpayAmount = transaction.paymentMethod === 'gpay' ? parseFloat(transaction.totalAmount) : 0;\n    const cashAmount = transaction.paymentMethod === 'cash' ? parseFloat(transaction.totalAmount) : 0;\n\n    // Update daily summary\n    const existingDaily = await this.getDailySummary(transaction.date);\n    if (existingDaily) {\n      await this.db.collection('daily_summaries').updateOne(\n        { date: transaction.date },\n        {\n          $inc: {\n            totalAmount: parseFloat(transaction.totalAmount),\n            gpayAmount: gpayAmount,\n            cashAmount: cashAmount,\n            orderCount: 1\n          }\n        }\n      );\n    } else {\n      await this.createDailySummary({\n        date: transaction.date,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    // Similar updates for weekly and monthly summaries...\n    const weekStart = this.getWeekStart(new Date(transaction.date));\n    const weekEnd = this.getWeekEnd(new Date(transaction.date));\n    const existingWeekly = await this.getWeeklySummary(weekStart);\n    \n    if (existingWeekly) {\n      await this.db.collection('weekly_summaries').updateOne(\n        { weekStart },\n        {\n          $inc: {\n            totalAmount: parseFloat(transaction.totalAmount),\n            gpayAmount: gpayAmount,\n            cashAmount: cashAmount,\n            orderCount: 1\n          }\n        }\n      );\n    } else {\n      await this.createWeeklySummary({\n        weekStart,\n        weekEnd,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    const month = transaction.date.substring(0, 7);\n    const existingMonthly = await this.getMonthlySummary(month);\n    \n    if (existingMonthly) {\n      await this.db.collection('monthly_summaries').updateOne(\n        { month },\n        {\n          $inc: {\n            totalAmount: parseFloat(transaction.totalAmount),\n            gpayAmount: gpayAmount,\n            cashAmount: cashAmount,\n            orderCount: 1\n          }\n        }\n      );\n    } else {\n      await this.createMonthlySummary({\n        month,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n  }\n\n  private getWeekStart(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1);\n    const monday = new Date(date.setDate(diff));\n    return monday.toISOString().split('T')[0];\n  }\n\n  private getWeekEnd(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? 0 : 7);\n    const sunday = new Date(date.setDate(diff));\n    return sunday.toISOString().split('T')[0];\n  }\n\n  // Clear data methods\n  async clearDataByDay(date: string): Promise<void> {\n    // Remove transactions for the specific date\n    await this.db.collection('transactions').deleteMany({ date });\n    \n    // Remove daily summary for the date\n    await this.db.collection('daily_summaries').deleteOne({ date });\n    \n    // Update weekly and monthly summaries by recalculating\n    await this.recalculateWeeklySummary(date);\n    await this.recalculateMonthlySummary(date);\n  }\n\n  async clearDataByWeek(weekStart: string): Promise<void> {\n    const weekEnd = this.getWeekEnd(new Date(weekStart));\n    \n    // Remove transactions for the week\n    await this.db.collection('transactions').deleteMany({\n      date: { $gte: weekStart, $lte: weekEnd }\n    });\n    \n    // Remove daily summaries for the week\n    await this.db.collection('daily_summaries').deleteMany({\n      date: { $gte: weekStart, $lte: weekEnd }\n    });\n    \n    // Remove weekly summary\n    await this.db.collection('weekly_summaries').deleteOne({ weekStart });\n    \n    // Update monthly summary by recalculating\n    await this.recalculateMonthlySummary(weekStart);\n  }\n\n  async clearDataByMonth(month: string): Promise<void> {\n    // Remove transactions for the month\n    await this.db.collection('transactions').deleteMany({\n      date: { $regex: `^${month}` }\n    });\n    \n    // Remove daily summaries for the month\n    await this.db.collection('daily_summaries').deleteMany({\n      date: { $regex: `^${month}` }\n    });\n    \n    // Remove weekly summaries that fall within the month\n    await this.db.collection('weekly_summaries').deleteMany({\n      weekStart: { $regex: `^${month}` }\n    });\n    \n    // Remove monthly summary\n    await this.db.collection('monthly_summaries').deleteOne({ month });\n  }\n\n  private async recalculateWeeklySummary(date: string): Promise<void> {\n    const weekStart = this.getWeekStart(new Date(date));\n    const weekEnd = this.getWeekEnd(new Date(date));\n    \n    const weekTransactions = await this.db.collection('transactions')\n      .find({ date: { $gte: weekStart, $lte: weekEnd } })\n      .toArray();\n    \n    // Remove existing weekly summary\n    await this.db.collection('weekly_summaries').deleteOne({ weekStart });\n    \n    if (weekTransactions.length === 0) {\n      return;\n    }\n    \n    const totalAmount = weekTransactions.reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const gpayAmount = weekTransactions\n      .filter(t => t.paymentMethod === 'gpay')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const cashAmount = weekTransactions\n      .filter(t => t.paymentMethod === 'cash')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    \n    await this.createWeeklySummary({\n      weekStart,\n      weekEnd,\n      totalAmount: totalAmount.toFixed(2),\n      gpayAmount: gpayAmount.toFixed(2),\n      cashAmount: cashAmount.toFixed(2),\n      orderCount: weekTransactions.length,\n    });\n  }\n\n  private async recalculateMonthlySummary(date: string): Promise<void> {\n    const month = date.substring(0, 7);\n    \n    const monthTransactions = await this.db.collection('transactions')\n      .find({ date: { $regex: `^${month}` } })\n      .toArray();\n    \n    // Remove existing monthly summary\n    await this.db.collection('monthly_summaries').deleteOne({ month });\n    \n    if (monthTransactions.length === 0) {\n      return;\n    }\n    \n    const totalAmount = monthTransactions.reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const gpayAmount = monthTransactions\n      .filter(t => t.paymentMethod === 'gpay')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    const cashAmount = monthTransactions\n      .filter(t => t.paymentMethod === 'cash')\n      .reduce((sum, t) => sum + parseFloat(t.totalAmount), 0);\n    \n    await this.createMonthlySummary({\n      month,\n      totalAmount: totalAmount.toFixed(2),\n      gpayAmount: gpayAmount.toFixed(2),\n      cashAmount: cashAmount.toFixed(2),\n      orderCount: monthTransactions.length,\n    });\n  }\n}\n\n// Initialize storage based on environment\nlet storageInstance: IStorage;\n\nasync function initializeStorage(): Promise<IStorage> {\n  const mongoConnectionString = process.env.MONGODB_URI || process.env.DATABASE_URL;\n  \n  if (mongoConnectionString && mongoConnectionString.includes('mongodb')) {\n    console.log(\"🔄 Initializing MongoDB Atlas storage...\");\n    try {\n      const mongoStorage = new MongoStorage(mongoConnectionString);\n      await mongoStorage.connect();\n      storageInstance = mongoStorage;\n      console.log(\"✅ MongoDB Atlas storage initialized successfully\");\n      return storageInstance;\n    } catch (error) {\n      console.error(\"❌ MongoDB Atlas initialization failed:\", error);\n      console.log(\"🔄 Falling back to in-memory storage...\");\n    }\n  } else {\n    console.log(\"📝 MongoDB connection string not provided, using in-memory storage\");\n  }\n  \n  storageInstance = new MemStorage();\n  console.log(\"✅ In-memory storage initialized\");\n  return storageInstance;\n}\n\n// Export the storage instance\nexport const storage = await initializeStorage();\n\n// Graceful shutdown for MongoDB\nprocess.on('SIGINT', async () => {\n  if (storageInstance && 'disconnect' in storageInstance) {\n    await storageInstance.disconnect?.();\n  }\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  if (storageInstance && 'disconnect' in storageInstance) {\n    await storageInstance.disconnect?.();\n  }\n  process.exit(0);\n});\n","size_bytes":36881},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const menuItems = pgTable(\"menu_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(),\n  image: text(\"image\").notNull(),\n  available: boolean(\"available\").notNull().default(true),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  items: jsonb(\"items\").notNull(), // Array of {id, name, price, quantity}\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // 'gpay', 'cash', 'split', or 'creditor'\n  billerName: text(\"biller_name\").notNull().default('Sriram'),\n  splitPayment: jsonb(\"split_payment\"), // {gpayAmount: number, cashAmount: number} for split payments\n  extras: jsonb(\"extras\"), // Array of {name: string, amount: number}\n  creditor: jsonb(\"creditor\"), // {name: string, paidAmount: number, balanceAmount: number, totalAmount: number}\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  dayName: text(\"day_name\").notNull(),\n  time: text(\"time\").notNull(), // HH:MM AM/PM format\n});\n\nexport const dailySummaries = pgTable(\"daily_summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: text(\"date\").notNull().unique(), // YYYY-MM-DD format\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  gpayAmount: decimal(\"gpay_amount\", { precision: 10, scale: 2 }).notNull(),\n  cashAmount: decimal(\"cash_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderCount: integer(\"order_count\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const weeklySummaries = pgTable(\"weekly_summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  weekStart: text(\"week_start\").notNull(), // YYYY-MM-DD format (Monday)\n  weekEnd: text(\"week_end\").notNull(), // YYYY-MM-DD format (Sunday)\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  gpayAmount: decimal(\"gpay_amount\", { precision: 10, scale: 2 }).notNull(),\n  cashAmount: decimal(\"cash_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderCount: integer(\"order_count\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const monthlySummaries = pgTable(\"monthly_summaries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  month: text(\"month\").notNull(), // YYYY-MM format\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  gpayAmount: decimal(\"gpay_amount\", { precision: 10, scale: 2 }).notNull(),\n  cashAmount: decimal(\"cash_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderCount: integer(\"order_count\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems).omit({\n  id: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDailySummarySchema = createInsertSchema(dailySummaries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWeeklySummarySchema = createInsertSchema(weeklySummaries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMonthlySummarySchema = createInsertSchema(monthlySummaries).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type MenuItem = typeof menuItems.$inferSelect;\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type DailySummary = typeof dailySummaries.$inferSelect;\nexport type InsertDailySummary = z.infer<typeof insertDailySummarySchema>;\n\nexport type WeeklySummary = typeof weeklySummaries.$inferSelect;\nexport type InsertWeeklySummary = z.infer<typeof insertWeeklySummarySchema>;\n\nexport type MonthlySummary = typeof monthlySummaries.$inferSelect;\nexport type InsertMonthlySummary = z.infer<typeof insertMonthlySummarySchema>;\n\n// Cart item type for frontend\nexport type CartItem = {\n  id: string;\n  name: string;\n  price: string;\n  quantity: number;\n};\n","size_bytes":5040},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport SplashPage from \"@/pages/splash\";\nimport LoginPage from \"@/pages/login\";\nimport MenuPage from \"@/pages/menu\";\nimport PaymentPage from \"@/pages/payment\";\nimport CreditorPage from \"@/pages/creditor\";\nimport InvoicePage from \"@/pages/invoice\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport AdminPage from \"@/pages/admin\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={SplashPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/menu\" component={MenuPage} />\n      <Route path=\"/payment\" component={PaymentPage} />\n      <Route path=\"/creditor\" component={CreditorPage} />\n      <Route path=\"/invoice\" component={InvoicePage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1390},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(0 0% 10%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 10%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 10%);\n  --primary: hsl(15 100% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 10%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 96%);\n  --muted-foreground: hsl(0 0% 42%);\n  --accent: hsl(15 85% 55%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 90%);\n  --input: hsl(0 0% 90%);\n  --ring: hsl(15 100% 60%);\n  --chart-1: hsl(15 100% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 10%);\n  --sidebar-primary: hsl(15 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 96%);\n  --sidebar-accent-foreground: hsl(15 100% 60%);\n  --sidebar-border: hsl(0 0% 90%);\n  --sidebar-ring: hsl(15 100% 60%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(15 100% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(15 100% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(15 100% 60% / 0.00), 0px 1px 2px -1px hsl(15 100% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(15 100% 60% / 0.00), 0px 1px 2px -1px hsl(15 100% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(15 100% 60% / 0.00), 0px 2px 4px -1px hsl(15 100% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(15 100% 60% / 0.00), 0px 4px 6px -1px hsl(15 100% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(15 100% 60% / 0.00), 0px 8px 10px -1px hsl(15 100% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(15 100% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 8%);\n  --foreground: hsl(0 0% 95%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(0 0% 8%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(15 100% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 95%);\n  --secondary-foreground: hsl(0 0% 10%);\n  --muted: hsl(0 0% 15%);\n  --muted-foreground: hsl(0 0% 60%);\n  --accent: hsl(15 85% 55%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 20%);\n  --ring: hsl(15 100% 60%);\n  --chart-1: hsl(15 100% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 95%);\n  --sidebar-primary: hsl(15 100% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(15 100% 60%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(15 100% 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.cart-badge {\n  background: linear-gradient(135deg, var(--primary), var(--accent));\n}\n\n.invoice-gradient {\n  background: linear-gradient(135deg, hsl(15 100% 60%), hsl(15 85% 55%));\n}\n\n.splash-gradient {\n  background: linear-gradient(135deg, var(--secondary), var(--primary), var(--accent));\n}\n","size_bytes":3776},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/db/connection.ts":{"content":"import { MemStorage } from \"../storage\";\nimport { MongoStorage } from \"./mongodb\";\n\nlet storageInstance: MemStorage | MongoStorage;\n\nexport function initializeStorage() {\n  const mongoConnectionString = process.env.MONGODB_URI || process.env.DATABASE_URL;\n  \n  if (mongoConnectionString) {\n    console.log(\"Initializing MongoDB Atlas storage...\");\n    storageInstance = new MongoStorage(mongoConnectionString);\n    \n    // Connect to MongoDB\n    (async () => {\n      try {\n        await (storageInstance as MongoStorage).connect();\n        console.log(\"✅ MongoDB Atlas connected successfully\");\n      } catch (error) {\n        console.error(\"❌ MongoDB Atlas connection failed:\", error);\n        console.log(\"Falling back to in-memory storage...\");\n        storageInstance = new MemStorage();\n      }\n    })();\n  } else {\n    console.log(\"Using in-memory storage (MongoDB connection string not provided)\");\n    storageInstance = new MemStorage();\n  }\n\n  return storageInstance;\n}\n\nexport function getStorage(): MemStorage | MongoStorage {\n  if (!storageInstance) {\n    return initializeStorage();\n  }\n  return storageInstance;\n}\n\n// Graceful shutdown for MongoDB\nprocess.on('SIGINT', async () => {\n  if (storageInstance instanceof MongoStorage) {\n    await storageInstance.disconnect();\n  }\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  if (storageInstance instanceof MongoStorage) {\n    await storageInstance.disconnect();\n  }\n  process.exit(0);\n});\n","size_bytes":1470},"server/db/mongodb.ts":{"content":"import { MongoClient, Db, Collection } from 'mongodb';\nimport { \n  type User, \n  type InsertUser, \n  type MenuItem, \n  type InsertMenuItem, \n  type Transaction, \n  type InsertTransaction, \n  type DailySummary, \n  type InsertDailySummary, \n  type WeeklySummary, \n  type InsertWeeklySummary, \n  type MonthlySummary, \n  type InsertMonthlySummary \n} from \"@shared/schema\";\nimport { type IStorage } from \"../storage\";\n\nexport class MongoStorage implements IStorage {\n  private client: MongoClient;\n  private db: Db;\n  private users: Collection<User>;\n  private menuItems: Collection<MenuItem>;\n  private transactions: Collection<Transaction>;\n  private dailySummaries: Collection<DailySummary>;\n  private weeklySummaries: Collection<WeeklySummary>;\n  private monthlySummaries: Collection<MonthlySummary>;\n  private isConnected: boolean = false;\n\n  constructor(connectionString: string, databaseName: string = 'chai-fi') {\n    this.client = new MongoClient(connectionString);\n    this.db = this.client.db(databaseName);\n    this.users = this.db.collection<User>('users');\n    this.menuItems = this.db.collection<MenuItem>('menu_items');\n    this.transactions = this.db.collection<Transaction>('transactions');\n    this.dailySummaries = this.db.collection<DailySummary>('daily_summaries');\n    this.weeklySummaries = this.db.collection<WeeklySummary>('weekly_summaries');\n    this.monthlySummaries = this.db.collection<MonthlySummary>('monthly_summaries');\n  }\n\n  async connect(): Promise<void> {\n    if (!this.isConnected) {\n      await this.client.connect();\n      this.isConnected = true;\n      console.log('Connected to MongoDB Atlas');\n      \n      // Initialize default data\n      await this.initializeDefaultData();\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isConnected) {\n      await this.client.close();\n      this.isConnected = false;\n      console.log('Disconnected from MongoDB Atlas');\n    }\n  }\n\n  private async initializeDefaultData(): Promise<void> {\n    // Create default users if they don't exist\n    const existingAdmin = await this.users.findOne({ username: \"Inowara\" });\n    if (!existingAdmin) {\n      await this.createUser({ username: \"Inowara\", password: \"Inowara@2025\" }); // Admin user\n    }\n    \n    const existingUser = await this.users.findOne({ username: \"Chai-fi\" });\n    if (!existingUser) {\n      await this.createUser({ username: \"Chai-fi\", password: \"Chai-fi@2025\" }); // Regular user\n    }\n\n    // Create default menu items if collection is empty\n    const menuCount = await this.menuItems.countDocuments();\n    if (menuCount === 0) {\n      await this.initializeMenuItems();\n    }\n\n    // Create indexes\n    await this.createIndexes();\n  }\n\n  private async createIndexes(): Promise<void> {\n    await this.users.createIndex({ username: 1 }, { unique: true });\n    await this.transactions.createIndex({ date: 1 });\n    await this.transactions.createIndex({ createdAt: -1 });\n    await this.dailySummaries.createIndex({ date: 1 }, { unique: true });\n    await this.weeklySummaries.createIndex({ weekStart: 1 }, { unique: true });\n    await this.monthlySummaries.createIndex({ month: 1 }, { unique: true });\n  }\n\n  private async initializeMenuItems(): Promise<void> {\n    const defaultItems: (InsertMenuItem & { _id?: string })[] = [\n      {\n        name: \"Masala Chai\",\n        description: \"Traditional spiced tea\",\n        price: \"25.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1571934811356-5cc061b6821f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Green Tea\",\n        description: \"Healthy herbal tea\",\n        price: \"30.00\",\n        category: \"Tea\",\n        image: \"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Cappuccino\",\n        description: \"Rich coffee with foam\",\n        price: \"80.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1509042239860-f550ce710b93?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Black Coffee\",\n        description: \"Strong black coffee\",\n        price: \"50.00\",\n        category: \"Coffee\",\n        image: \"https://images.unsplash.com/photo-1447933601403-0c6688de566e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Samosa\",\n        description: \"Crispy fried snack\",\n        price: \"20.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1601050690597-df0568f70950?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Veg Sandwich\",\n        description: \"Fresh vegetable sandwich\",\n        price: \"60.00\",\n        category: \"Snacks\",\n        image: \"https://images.unsplash.com/photo-1509722747041-616f39b57569?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Orange Juice\",\n        description: \"Fresh squeezed orange\",\n        price: \"40.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n      {\n        name: \"Mango Lassi\",\n        description: \"Sweet yogurt drink\",\n        price: \"45.00\",\n        category: \"Beverages\",\n        image: \"https://images.unsplash.com/photo-1571091718767-18b5b1457add?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        available: true,\n      },\n    ];\n\n    for (const item of defaultItems) {\n      await this.createMenuItem(item);\n    }\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const user = await this.users.findOne({ id });\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const user = await this.users.findOne({ username });\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = new Date().getTime().toString();\n    const user: User = { ...insertUser, id };\n    await this.users.insertOne(user);\n    return user;\n  }\n\n  // Menu Items\n  async getMenuItems(): Promise<MenuItem[]> {\n    return await this.menuItems.find({}).toArray();\n  }\n\n  async getMenuItem(id: string): Promise<MenuItem | undefined> {\n    const item = await this.menuItems.findOne({ id });\n    return item || undefined;\n  }\n\n  async createMenuItem(insertItem: InsertMenuItem): Promise<MenuItem> {\n    const id = new Date().getTime().toString();\n    const item: MenuItem = { ...insertItem, id };\n    await this.menuItems.insertOne(item);\n    return item;\n  }\n\n  async updateMenuItem(id: string, updateData: Partial<MenuItem>): Promise<MenuItem | undefined> {\n    const result = await this.menuItems.findOneAndUpdate(\n      { id },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    );\n    return result || undefined;\n  }\n\n  // Transactions\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = new Date().getTime().toString();\n    const now = new Date();\n    const transaction: Transaction = { \n      ...insertTransaction, \n      id,\n      createdAt: now\n    };\n    \n    await this.transactions.insertOne(transaction);\n    await this.updateSummaries(transaction);\n    \n    return transaction;\n  }\n\n  async getTransactions(limit?: number): Promise<Transaction[]> {\n    const query = this.transactions.find({}).sort({ createdAt: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  async getTransactionsByDate(date: string): Promise<Transaction[]> {\n    return await this.transactions\n      .find({ date })\n      .sort({ createdAt: -1 })\n      .toArray();\n  }\n\n  async getTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]> {\n    return await this.transactions\n      .find({ \n        date: { \n          $gte: startDate, \n          $lte: endDate \n        } \n      })\n      .sort({ createdAt: -1 })\n      .toArray();\n  }\n\n  // Daily Summaries\n  async createDailySummary(insertSummary: InsertDailySummary): Promise<DailySummary> {\n    const id = new Date().getTime().toString();\n    const summary: DailySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.dailySummaries.insertOne(summary);\n    return summary;\n  }\n\n  async getDailySummary(date: string): Promise<DailySummary | undefined> {\n    const summary = await this.dailySummaries.findOne({ date });\n    return summary || undefined;\n  }\n\n  async getDailySummaries(limit?: number): Promise<DailySummary[]> {\n    const query = this.dailySummaries.find({}).sort({ date: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  // Weekly Summaries\n  async createWeeklySummary(insertSummary: InsertWeeklySummary): Promise<WeeklySummary> {\n    const id = new Date().getTime().toString();\n    const summary: WeeklySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.weeklySummaries.insertOne(summary);\n    return summary;\n  }\n\n  async getWeeklySummary(weekStart: string): Promise<WeeklySummary | undefined> {\n    const summary = await this.weeklySummaries.findOne({ weekStart });\n    return summary || undefined;\n  }\n\n  async getWeeklySummaries(limit?: number): Promise<WeeklySummary[]> {\n    const query = this.weeklySummaries.find({}).sort({ weekStart: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  // Monthly Summaries\n  async createMonthlySummary(insertSummary: InsertMonthlySummary): Promise<MonthlySummary> {\n    const id = new Date().getTime().toString();\n    const summary: MonthlySummary = { \n      ...insertSummary, \n      id,\n      createdAt: new Date()\n    };\n    \n    await this.monthlySummaries.insertOne(summary);\n    return summary;\n  }\n\n  async getMonthlySummary(month: string): Promise<MonthlySummary | undefined> {\n    const summary = await this.monthlySummaries.findOne({ month });\n    return summary || undefined;\n  }\n\n  async getMonthlySummaries(limit?: number): Promise<MonthlySummary[]> {\n    const query = this.monthlySummaries.find({}).sort({ month: -1 });\n    if (limit) query.limit(limit);\n    return await query.toArray();\n  }\n\n  private async updateSummaries(transaction: Transaction): Promise<void> {\n    let gpayAmount = 0;\n    let cashAmount = 0;\n\n    if (transaction.paymentMethod === 'gpay') {\n      gpayAmount = parseFloat(transaction.totalAmount);\n    } else if (transaction.paymentMethod === 'cash') {\n      cashAmount = parseFloat(transaction.totalAmount);\n    } else if (transaction.paymentMethod === 'split' && transaction.splitPayment) {\n      gpayAmount = transaction.splitPayment.gpayAmount || 0;\n      cashAmount = transaction.splitPayment.cashAmount || 0;\n    }\n\n    // Update daily summary\n    const existingDaily = await this.getDailySummary(transaction.date);\n    if (existingDaily) {\n      const newTotalAmount = (parseFloat(existingDaily.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      const newGpayAmount = (parseFloat(existingDaily.gpayAmount) + gpayAmount).toFixed(2);\n      const newCashAmount = (parseFloat(existingDaily.cashAmount) + cashAmount).toFixed(2);\n      const newOrderCount = existingDaily.orderCount + 1;\n\n      await this.dailySummaries.updateOne(\n        { date: transaction.date },\n        {\n          $set: {\n            totalAmount: newTotalAmount,\n            gpayAmount: newGpayAmount,\n            cashAmount: newCashAmount,\n            orderCount: newOrderCount\n          }\n        }\n      );\n    } else {\n      await this.createDailySummary({\n        date: transaction.date,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    // Update weekly summary\n    const weekStart = this.getWeekStart(new Date(transaction.date));\n    const weekEnd = this.getWeekEnd(new Date(transaction.date));\n    const existingWeekly = await this.getWeeklySummary(weekStart);\n\n    if (existingWeekly) {\n      const newTotalAmount = (parseFloat(existingWeekly.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      const newGpayAmount = (parseFloat(existingWeekly.gpayAmount) + gpayAmount).toFixed(2);\n      const newCashAmount = (parseFloat(existingWeekly.cashAmount) + cashAmount).toFixed(2);\n      const newOrderCount = existingWeekly.orderCount + 1;\n\n      await this.weeklySummaries.updateOne(\n        { weekStart },\n        {\n          $set: {\n            totalAmount: newTotalAmount,\n            gpayAmount: newGpayAmount,\n            cashAmount: newCashAmount,\n            orderCount: newOrderCount\n          }\n        }\n      );\n    } else {\n      await this.createWeeklySummary({\n        weekStart,\n        weekEnd,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n\n    // Update monthly summary\n    const month = transaction.date.substring(0, 7); // YYYY-MM\n    const existingMonthly = await this.getMonthlySummary(month);\n\n    if (existingMonthly) {\n      const newTotalAmount = (parseFloat(existingMonthly.totalAmount) + parseFloat(transaction.totalAmount)).toFixed(2);\n      const newGpayAmount = (parseFloat(existingMonthly.gpayAmount) + gpayAmount).toFixed(2);\n      const newCashAmount = (parseFloat(existingMonthly.cashAmount) + cashAmount).toFixed(2);\n      const newOrderCount = existingMonthly.orderCount + 1;\n\n      await this.monthlySummaries.updateOne(\n        { month },\n        {\n          $set: {\n            totalAmount: newTotalAmount,\n            gpayAmount: newGpayAmount,\n            cashAmount: newCashAmount,\n            orderCount: newOrderCount\n          }\n        }\n      );\n    } else {\n      await this.createMonthlySummary({\n        month,\n        totalAmount: transaction.totalAmount,\n        gpayAmount: gpayAmount.toFixed(2),\n        cashAmount: cashAmount.toFixed(2),\n        orderCount: 1,\n      });\n    }\n  }\n\n  private getWeekStart(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? -6 : 1);\n    const monday = new Date(date.setDate(diff));\n    return monday.toISOString().split('T')[0];\n  }\n\n  private getWeekEnd(date: Date): string {\n    const day = date.getDay();\n    const diff = date.getDate() - day + (day === 0 ? 0 : 7);\n    const sunday = new Date(date.setDate(diff));\n    return sunday.toISOString().split('T')[0];\n  }\n\n  // Clear data methods\n  async clearDataByDay(date: string): Promise<void> {\n    await this.transactions.deleteMany({ date });\n    await this.dailySummaries.deleteOne({ date });\n  }\n\n  async clearDataByWeek(weekStart: string): Promise<void> {\n    const weekEnd = this.getWeekEnd(new Date(weekStart));\n    await this.transactions.deleteMany({ \n      date: { \n        $gte: weekStart, \n        $lte: weekEnd \n      } \n    });\n    await this.weeklySummaries.deleteOne({ weekStart });\n  }\n\n  async clearDataByMonth(month: string): Promise<void> {\n    const startDate = month + '-01';\n    const endDate = month + '-31';\n    await this.transactions.deleteMany({ \n      date: { \n        $gte: startDate, \n        $lte: endDate \n      } \n    });\n    await this.monthlySummaries.deleteOne({ month });\n  }\n}\n","size_bytes":15510},"client/src/components/invoice-pdf.tsx":{"content":"import { Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { generateInvoicePDF } from \"@/lib/pdf-utils\";\nimport type { Transaction } from \"@shared/schema\";\n\ninterface InvoicePDFProps {\n  transaction: Transaction;\n  className?: string;\n}\n\nexport function InvoicePDF({ transaction, className }: InvoicePDFProps) {\n  const handleDownload = async () => {\n    try {\n      await generateInvoicePDF(transaction);\n    } catch (error) {\n      console.error(\"Failed to generate invoice PDF:\", error);\n    }\n  };\n\n  return (\n    <Button \n      onClick={handleDownload}\n      className={className}\n      data-testid=\"button-download-invoice\"\n    >\n      <Download className=\"mr-2\" size={16} />\n      Download Invoice\n    </Button>\n  );\n}\n\nexport function SummaryPDFButton({ \n  type, \n  data, \n  transactions = [] \n}: { \n  type: \"daily\" | \"weekly\" | \"monthly\";\n  data: any;\n  transactions?: any[];\n}) {\n  const handleDownload = async () => {\n    try {\n      const { generateDailySummaryPDF, generateWeeklySummaryPDF, generateMonthlySummaryPDF } = await import(\"@/lib/pdf-utils\");\n      \n      switch (type) {\n        case \"daily\":\n          await generateDailySummaryPDF(data, transactions);\n          break;\n        case \"weekly\":\n          await generateWeeklySummaryPDF(data, transactions);\n          break;\n        case \"monthly\":\n          await generateMonthlySummaryPDF(data, transactions);\n          break;\n      }\n    } catch (error) {\n      console.error(`Failed to generate ${type} summary PDF:`, error);\n    }\n  };\n\n  return (\n    <Button \n      onClick={handleDownload}\n      size=\"sm\"\n      className=\"bg-primary text-primary-foreground hover:bg-accent\"\n      data-testid={`button-download-${type}`}\n    >\n      <Download className=\"mr-2\" size={16} />\n      Download\n    </Button>\n  );\n}\n","size_bytes":1828},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"let authToken: string | null = null;\n\nexport const setAuthToken = (token: string) => {\n  authToken = token;\n  localStorage.setItem(\"authToken\", token);\n};\n\nexport const getAuthToken = (): string | null => {\n  if (authToken) return authToken;\n  \n  const stored = localStorage.getItem(\"authToken\");\n  if (stored) {\n    authToken = stored;\n    return stored;\n  }\n  \n  return null;\n};\n\nexport const clearAuthToken = () => {\n  authToken = null;\n  localStorage.removeItem(\"authToken\");\n};\n\nexport const isAuthenticated = (): boolean => {\n  return getAuthToken() !== null;\n};\n","size_bytes":569},"client/src/lib/pdf-utils.ts":{"content":"import jsPDF from \"jspdf\";\nimport type { Transaction, DailySummary, WeeklySummary, MonthlySummary } from \"@shared/schema\";\n\n// Brand colors (from the design)\nconst COLORS = {\n  primary: [255, 102, 51], // Orange\n  secondary: [26, 26, 26], // Black\n  white: [255, 255, 255],\n  gray: [128, 128, 128],\n  lightGray: [245, 245, 245]\n};\n\n// Helper function to add header to PDF\nconst addHeader = (doc: jsPDF, title: string, subtitle?: string) => {\n  // Orange header background\n  doc.setFillColor(COLORS.primary[0], COLORS.primary[1], COLORS.primary[2]);\n  doc.rect(0, 0, 210, 45, 'F');\n  \n  // White text on orange background\n  doc.setTextColor(COLORS.white[0], COLORS.white[1], COLORS.white[2]);\n  doc.setFontSize(28);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text('Chai-Fi', 20, 25);\n  \n  doc.setFontSize(12);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text('Modern Billing Solution', 20, 35);\n  \n  // Title on the right\n  doc.setFontSize(16);\n  doc.setFont(\"helvetica\", \"bold\");\n  const titleWidth = doc.getTextWidth(title);\n  doc.text(title, 190 - titleWidth, 25);\n  \n  if (subtitle) {\n    doc.setFontSize(10);\n    doc.setFont(\"helvetica\", \"normal\");\n    const subtitleWidth = doc.getTextWidth(subtitle);\n    doc.text(subtitle, 190 - subtitleWidth, 32);\n  }\n  \n  // Reset text color to black\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n};\n\n// Helper function to add footer\nconst addFooter = (doc: jsPDF, yPosition: number) => {\n  const pageHeight = doc.internal.pageSize.height;\n  const footerY = Math.max(yPosition + 20, pageHeight - 30);\n  \n  // Light gray line\n  doc.setDrawColor(COLORS.lightGray[0], COLORS.lightGray[1], COLORS.lightGray[2]);\n  doc.line(20, footerY - 10, 190, footerY - 10);\n  \n  doc.setFontSize(10);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n  doc.text('Thank you for choosing Chai-Fi!', 20, footerY);\n  doc.text('For support, contact us at support@chai-fi.com', 20, footerY + 6);\n  \n  // Add timestamp\n  const timestamp = new Date().toLocaleString();\n  const timestampWidth = doc.getTextWidth(`Generated on: ${timestamp}`);\n  doc.text(`Generated on: ${timestamp}`, 190 - timestampWidth, footerY + 6);\n};\n\n// Helper function to format currency\nconst formatCurrency = (amount: string | number): string => {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return `₹${num.toFixed(2)}`;\n};\n\nexport const generateInvoicePDF = async (transaction: Transaction) => {\n  const doc = new jsPDF();\n  \n  // Header\n  addHeader(doc, `Invoice #${transaction.id.slice(-8).toUpperCase()}`);\n  \n  let yPos = 60;\n  \n  // Bill Details Section\n  doc.setFontSize(14);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text('Bill Details', 20, yPos);\n  \n  doc.setFontSize(10);\n  doc.setFont(\"helvetica\", \"normal\");\n  yPos += 10;\n  \n  const billDetails = [\n    ['Date:', transaction.date],\n    ['Day:', transaction.dayName],\n    ['Time:', transaction.time],\n    ['Biller:', transaction.billerName],\n  ];\n  \n  billDetails.forEach(([label, value]) => {\n    doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    doc.text(label, 20, yPos);\n    doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n    doc.text(value, 60, yPos);\n    yPos += 7;\n  });\n  \n  // Payment Details Section\n  yPos = 70; // Reset to align with bill details\n  doc.setFontSize(14);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text('Payment Details', 120, yPos);\n  \n  doc.setFontSize(10);\n  doc.setFont(\"helvetica\", \"normal\");\n  yPos += 10;\n  \n  const paymentDetails = [\n    ['Method:', transaction.paymentMethod === 'gpay' ? 'Google Pay' : 'Cash'],\n    ['Status:', 'Paid'],\n    ['Transaction ID:', transaction.id.slice(-12).toUpperCase()],\n  ];\n  \n  paymentDetails.forEach(([label, value]) => {\n    doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    doc.text(label, 120, yPos);\n    doc.setTextColor(value === 'Paid' ? [34, 197, 94] : COLORS.secondary);\n    doc.text(value, 160, yPos);\n    yPos += 7;\n  });\n  \n  // Items Section\n  yPos = 120;\n  doc.setFontSize(14);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text('Items Ordered', 20, yPos);\n  yPos += 15;\n  \n  // Table header\n  doc.setFillColor(COLORS.lightGray[0], COLORS.lightGray[1], COLORS.lightGray[2]);\n  doc.rect(20, yPos - 5, 170, 10, 'F');\n  \n  doc.setFontSize(10);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text('Item', 25, yPos);\n  doc.text('Qty', 120, yPos);\n  doc.text('Price', 140, yPos);\n  doc.text('Total', 165, yPos);\n  yPos += 10;\n  \n  // Items\n  const items = Array.isArray(transaction.items) ? transaction.items : [];\n  doc.setFont(\"helvetica\", \"normal\");\n  \n  items.forEach((item: any) => {\n    const itemTotal = parseFloat(item.price) * item.quantity;\n    \n    doc.text(item.name, 25, yPos);\n    doc.text(item.quantity.toString(), 125, yPos);\n    doc.text(formatCurrency(item.price), 140, yPos);\n    doc.text(formatCurrency(itemTotal), 165, yPos);\n    yPos += 8;\n  });\n  \n  // Total Section\n  yPos += 10;\n  doc.setDrawColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n  doc.line(20, yPos, 190, yPos);\n  yPos += 15;\n  \n  doc.setFontSize(16);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text('Total Amount:', 20, yPos);\n  \n  doc.setTextColor(COLORS.primary[0], COLORS.primary[1], COLORS.primary[2]);\n  const totalWidth = doc.getTextWidth(formatCurrency(transaction.totalAmount));\n  doc.text(formatCurrency(transaction.totalAmount), 190 - totalWidth, yPos);\n  \n  // Footer\n  addFooter(doc, yPos);\n  \n  // Save the PDF\n  doc.save(`chai-fi-invoice-${transaction.id.slice(-8)}.pdf`);\n};\n\nexport const generateDailySummaryPDF = async (summary: DailySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  addHeader(doc, 'Daily Summary', summary.date);\n  \n  let yPos = 65;\n  \n  // Summary Overview\n  doc.setFontSize(16);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text(`Daily Summary - ${summary.date}`, 20, yPos);\n  yPos += 20;\n  \n  // Summary Cards\n  const summaryData = [\n    ['Total Sales', formatCurrency(summary.totalAmount), COLORS.primary],\n    ['GPay Payments', formatCurrency(summary.gpayAmount), [34, 197, 94]],\n    ['Cash Payments', formatCurrency(summary.cashAmount), [107, 114, 128]],\n    ['Total Orders', summary.orderCount.toString(), [59, 130, 246]],\n  ];\n  \n  summaryData.forEach(([label, value, color], index) => {\n    const xPos = 20 + (index % 2) * 85;\n    const yOffset = Math.floor(index / 2) * 30;\n    \n    // Card background\n    doc.setFillColor(color[0], color[1], color[2], 0.1);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 25, 'F');\n    \n    // Border\n    doc.setDrawColor(color[0], color[1], color[2]);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 25);\n    \n    // Label\n    doc.setFontSize(10);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    doc.text(label, xPos + 5, yPos + yOffset + 2);\n    \n    // Value\n    doc.setFontSize(14);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setTextColor(color[0], color[1], color[2]);\n    doc.text(value, xPos + 5, yPos + yOffset + 12);\n  });\n  \n  yPos += 70;\n  \n  // Payment Breakdown\n  if (summary.gpayAmount !== '0.00' || summary.cashAmount !== '0.00') {\n    doc.setFontSize(14);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n    doc.text('Payment Method Breakdown', 20, yPos);\n    yPos += 15;\n    \n    const totalAmount = parseFloat(summary.totalAmount);\n    const gpayPercent = totalAmount > 0 ? ((parseFloat(summary.gpayAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n    const cashPercent = totalAmount > 0 ? ((parseFloat(summary.cashAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n    \n    doc.setFontSize(12);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.text(`GPay: ${formatCurrency(summary.gpayAmount)} (${gpayPercent}%)`, 20, yPos);\n    doc.text(`Cash: ${formatCurrency(summary.cashAmount)} (${cashPercent}%)`, 20, yPos + 10);\n    yPos += 25;\n  }\n  \n  addFooter(doc, yPos);\n  \n  doc.save(`chai-fi-daily-summary-${summary.date}.pdf`);\n};\n\nexport const generateWeeklySummaryPDF = async (summary: WeeklySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  addHeader(doc, 'Weekly Summary', `${summary.weekStart} to ${summary.weekEnd}`);\n  \n  let yPos = 65;\n  \n  // Summary Overview\n  doc.setFontSize(16);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text(`Weekly Summary - ${summary.weekStart} to ${summary.weekEnd}`, 20, yPos);\n  yPos += 20;\n  \n  // Summary Cards (same as daily but with weekly data)\n  const summaryData = [\n    ['Total Sales', formatCurrency(summary.totalAmount), COLORS.primary],\n    ['GPay Payments', formatCurrency(summary.gpayAmount), [34, 197, 94]],\n    ['Cash Payments', formatCurrency(summary.cashAmount), [107, 114, 128]],\n    ['Total Orders', summary.orderCount.toString(), [59, 130, 246]],\n  ];\n  \n  summaryData.forEach(([label, value, color], index) => {\n    const xPos = 20 + (index % 2) * 85;\n    const yOffset = Math.floor(index / 2) * 30;\n    \n    // Card background\n    doc.setFillColor(color[0], color[1], color[2], 0.1);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 25, 'F');\n    \n    // Border\n    doc.setDrawColor(color[0], color[1], color[2]);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 25);\n    \n    // Label\n    doc.setFontSize(10);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    doc.text(label, xPos + 5, yPos + yOffset + 2);\n    \n    // Value\n    doc.setFontSize(14);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setTextColor(color[0], color[1], color[2]);\n    doc.text(value, xPos + 5, yPos + yOffset + 12);\n  });\n  \n  yPos += 70;\n  \n  // Payment Breakdown\n  doc.setFontSize(14);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text('Weekly Payment Analysis', 20, yPos);\n  yPos += 15;\n  \n  const totalAmount = parseFloat(summary.totalAmount);\n  const gpayPercent = totalAmount > 0 ? ((parseFloat(summary.gpayAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n  const cashPercent = totalAmount > 0 ? ((parseFloat(summary.cashAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n  const avgOrderValue = summary.orderCount > 0 ? (totalAmount / summary.orderCount).toFixed(2) : '0.00';\n  \n  doc.setFontSize(12);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(`GPay: ${formatCurrency(summary.gpayAmount)} (${gpayPercent}%)`, 20, yPos);\n  doc.text(`Cash: ${formatCurrency(summary.cashAmount)} (${cashPercent}%)`, 20, yPos + 8);\n  doc.text(`Average Order Value: ${formatCurrency(avgOrderValue)}`, 20, yPos + 16);\n  doc.text(`Orders per Day: ${(summary.orderCount / 7).toFixed(1)}`, 20, yPos + 24);\n  \n  addFooter(doc, yPos + 30);\n  \n  doc.save(`chai-fi-weekly-summary-${summary.weekStart}.pdf`);\n};\n\nexport const generateMonthlySummaryPDF = async (summary: MonthlySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  const monthName = new Date(summary.month + '-01').toLocaleDateString('en-US', { \n    month: 'long', \n    year: 'numeric' \n  });\n  \n  addHeader(doc, 'Monthly Summary', monthName);\n  \n  let yPos = 65;\n  \n  // Summary Overview\n  doc.setFontSize(16);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text(`Monthly Summary - ${monthName}`, 20, yPos);\n  yPos += 20;\n  \n  // Large summary cards\n  const summaryData = [\n    ['Total Revenue', formatCurrency(summary.totalAmount), COLORS.primary],\n    ['GPay Revenue', formatCurrency(summary.gpayAmount), [34, 197, 94]],\n    ['Cash Revenue', formatCurrency(summary.cashAmount), [107, 114, 128]],\n    ['Total Orders', summary.orderCount.toString(), [59, 130, 246]],\n  ];\n  \n  summaryData.forEach(([label, value, color], index) => {\n    const xPos = 20 + (index % 2) * 85;\n    const yOffset = Math.floor(index / 2) * 35;\n    \n    // Card background\n    doc.setFillColor(color[0], color[1], color[2], 0.1);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 30, 'F');\n    \n    // Border\n    doc.setDrawColor(color[0], color[1], color[2]);\n    doc.rect(xPos, yPos + yOffset - 5, 80, 30);\n    \n    // Label\n    doc.setFontSize(10);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    doc.text(label, xPos + 5, yPos + yOffset + 2);\n    \n    // Value\n    doc.setFontSize(16);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setTextColor(color[0], color[1], color[2]);\n    doc.text(value, xPos + 5, yPos + yOffset + 15);\n  });\n  \n  yPos += 80;\n  \n  // Monthly Analysis\n  doc.setFontSize(14);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n  doc.text('Monthly Business Analysis', 20, yPos);\n  yPos += 15;\n  \n  const totalAmount = parseFloat(summary.totalAmount);\n  const gpayPercent = totalAmount > 0 ? ((parseFloat(summary.gpayAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n  const cashPercent = totalAmount > 0 ? ((parseFloat(summary.cashAmount) / totalAmount) * 100).toFixed(1) : '0.0';\n  const avgOrderValue = summary.orderCount > 0 ? (totalAmount / summary.orderCount).toFixed(2) : '0.00';\n  const avgDailyRevenue = (totalAmount / 30).toFixed(2); // Approximate 30 days\n  const avgDailyOrders = (summary.orderCount / 30).toFixed(1);\n  \n  const analysisData = [\n    ['Payment Distribution:'],\n    [`  • GPay: ${formatCurrency(summary.gpayAmount)} (${gpayPercent}%)`],\n    [`  • Cash: ${formatCurrency(summary.cashAmount)} (${cashPercent}%)`],\n    [''],\n    ['Performance Metrics:'],\n    [`  • Average Order Value: ${formatCurrency(avgOrderValue)}`],\n    [`  • Daily Revenue Average: ${formatCurrency(avgDailyRevenue)}`],\n    [`  • Daily Orders Average: ${avgDailyOrders}`],\n  ];\n  \n  doc.setFontSize(11);\n  doc.setFont(\"helvetica\", \"normal\");\n  \n  analysisData.forEach((line) => {\n    if (line.startsWith('Payment Distribution:') || line.startsWith('Performance Metrics:')) {\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setTextColor(COLORS.secondary[0], COLORS.secondary[1], COLORS.secondary[2]);\n    } else {\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setTextColor(COLORS.gray[0], COLORS.gray[1], COLORS.gray[2]);\n    }\n    \n    doc.text(line, 20, yPos);\n    yPos += 7;\n  });\n  \n  addFooter(doc, yPos + 10);\n  \n  doc.save(`chai-fi-monthly-summary-${summary.month}.pdf`);\n};\n","size_bytes":14763},"client/src/lib/pdf.ts":{"content":"import jsPDF from \"jspdf\";\nimport type { Transaction, DailySummary, WeeklySummary, MonthlySummary } from \"@shared/schema\";\n\nexport const generateInvoicePDF = async (transaction: Transaction) => {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(255, 102, 51); // Orange color\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(24);\n  doc.text('Chai-Fi', 20, 25);\n  doc.setFontSize(12);\n  doc.text('Modern Billing Solution', 20, 32);\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(16);\n  doc.text(`Invoice #${transaction.id.slice(-6).toUpperCase()}`, 150, 25);\n  \n  // Reset text color\n  doc.setTextColor(0, 0, 0);\n  \n  // Bill Details\n  doc.setFontSize(14);\n  doc.text('Bill Details', 20, 60);\n  doc.setFontSize(10);\n  doc.text(`Date: ${transaction.date}`, 20, 70);\n  doc.text(`Day: ${transaction.dayName}`, 20, 77);\n  doc.text(`Time: ${transaction.time}`, 20, 84);\n  doc.text(`Biller: ${transaction.billerName}`, 20, 91);\n  \n  // Payment Details\n  doc.setFontSize(14);\n  doc.text('Payment Details', 110, 60);\n  doc.setFontSize(10);\n  doc.text(`Method: ${transaction.paymentMethod === 'gpay' ? 'Google Pay' : 'Cash'}`, 110, 70);\n  doc.text('Status: Paid', 110, 77);\n  \n  // Items\n  doc.setFontSize(14);\n  doc.text('Items Ordered', 20, 110);\n  \n  let yPos = 120;\n  const items = Array.isArray(transaction.items) ? transaction.items : [];\n  \n  items.forEach((item: any, index: number) => {\n    doc.setFontSize(10);\n    doc.text(`${item.name} x${item.quantity}`, 20, yPos);\n    doc.text(`₹${(parseFloat(item.price) * item.quantity).toFixed(2)}`, 150, yPos);\n    yPos += 7;\n  });\n  \n  // Total\n  yPos += 10;\n  doc.setFontSize(14);\n  doc.text('Total Amount:', 20, yPos);\n  doc.text(`₹${transaction.totalAmount}`, 150, yPos);\n  \n  // Footer\n  yPos += 20;\n  doc.setFontSize(10);\n  doc.text('Thank you for choosing Chai-Fi!', 20, yPos);\n  doc.text('For support, contact us at support@chai-fi.com', 20, yPos + 7);\n  \n  doc.save(`chai-fi-invoice-${transaction.id.slice(-6)}.pdf`);\n};\n\nexport const generateDailySummaryPDF = async (summary: DailySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(255, 102, 51);\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(24);\n  doc.text('Chai-Fi', 20, 25);\n  doc.setFontSize(12);\n  doc.text('Daily Summary Report', 20, 32);\n  \n  doc.setTextColor(0, 0, 0);\n  \n  // Summary Details\n  doc.setFontSize(16);\n  doc.text(`Daily Summary - ${summary.date}`, 20, 60);\n  \n  doc.setFontSize(12);\n  doc.text(`Total Sales: ₹${summary.totalAmount}`, 20, 80);\n  doc.text(`GPay Payments: ₹${summary.gpayAmount}`, 20, 90);\n  doc.text(`Cash Payments: ₹${summary.cashAmount}`, 20, 100);\n  doc.text(`Total Orders: ${summary.orderCount}`, 20, 110);\n  \n  doc.save(`chai-fi-daily-summary-${summary.date}.pdf`);\n};\n\nexport const generateWeeklySummaryPDF = async (summary: WeeklySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(255, 102, 51);\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(24);\n  doc.text('Chai-Fi', 20, 25);\n  doc.setFontSize(12);\n  doc.text('Weekly Summary Report', 20, 32);\n  \n  doc.setTextColor(0, 0, 0);\n  \n  // Summary Details\n  doc.setFontSize(16);\n  doc.text(`Weekly Summary - ${summary.weekStart} to ${summary.weekEnd}`, 20, 60);\n  \n  doc.setFontSize(12);\n  doc.text(`Total Sales: ₹${summary.totalAmount}`, 20, 80);\n  doc.text(`GPay Payments: ₹${summary.gpayAmount}`, 20, 90);\n  doc.text(`Cash Payments: ₹${summary.cashAmount}`, 20, 100);\n  doc.text(`Total Orders: ${summary.orderCount}`, 20, 110);\n  \n  doc.save(`chai-fi-weekly-summary-${summary.weekStart}.pdf`);\n};\n\nexport const generateMonthlySummaryPDF = async (summary: MonthlySummary, transactions: Transaction[]) => {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(255, 102, 51);\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(24);\n  doc.text('Chai-Fi', 20, 25);\n  doc.setFontSize(12);\n  doc.text('Monthly Summary Report', 20, 32);\n  \n  doc.setTextColor(0, 0, 0);\n  \n  // Summary Details\n  doc.setFontSize(16);\n  doc.text(`Monthly Summary - ${summary.month}`, 20, 60);\n  \n  doc.setFontSize(12);\n  doc.text(`Total Sales: ₹${summary.totalAmount}`, 20, 80);\n  doc.text(`GPay Payments: ₹${summary.gpayAmount}`, 20, 90);\n  doc.text(`Cash Payments: ₹${summary.cashAmount}`, 20, 100);\n  doc.text(`Total Orders: ${summary.orderCount}`, 20, 110);\n  \n  doc.save(`chai-fi-monthly-summary-${summary.month}.pdf`);\n};\n\nexport const generateMenuSalesPDF = async (menuSales: Array<{name: string, count: number}>) => {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(255, 102, 51);\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(24);\n  doc.text('Chai-Fi', 20, 25);\n  doc.setFontSize(12);\n  doc.text('Menu Sales Report', 20, 32);\n  \n  doc.setTextColor(0, 0, 0);\n  \n  // Report Details\n  const today = new Date().toLocaleDateString();\n  doc.setFontSize(16);\n  doc.text(`Today's Menu Sales - ${today}`, 20, 60);\n  \n  // Calculate totals\n  const totalItems = menuSales.reduce((sum, item) => sum + item.count, 0);\n  const uniqueItems = menuSales.length;\n  \n  doc.setFontSize(12);\n  doc.text(`Total Items Sold: ${totalItems}`, 20, 80);\n  doc.text(`Unique Menu Items: ${uniqueItems}`, 20, 90);\n  \n  // Table Header\n  doc.setFontSize(14);\n  doc.text('Menu Item Sales Breakdown', 20, 110);\n  \n  // Table\n  doc.setFontSize(10);\n  doc.text('Item Name', 20, 125);\n  doc.text('Quantity Sold', 120, 125);\n  doc.text('% of Total', 160, 125);\n  \n  // Draw line under header\n  doc.line(20, 128, 190, 128);\n  \n  let yPos = 135;\n  menuSales.forEach((item, index) => {\n    if (yPos > 270) { // Start new page if needed\n      doc.addPage();\n      yPos = 20;\n    }\n    \n    const percentage = totalItems > 0 ? ((item.count / totalItems) * 100).toFixed(1) : '0.0';\n    \n    doc.text(item.name.length > 25 ? item.name.substring(0, 25) + '...' : item.name, 20, yPos);\n    doc.text(item.count.toString(), 120, yPos);\n    doc.text(`${percentage}%`, 160, yPos);\n    \n    yPos += 7;\n  });\n  \n  // Footer\n  yPos += 20;\n  if (yPos > 270) {\n    doc.addPage();\n    yPos = 20;\n  }\n  \n  doc.setFontSize(10);\n  doc.text('Generated by Chai-Fi Analytics', 20, yPos);\n  doc.text(`Report generated on: ${new Date().toLocaleString()}`, 20, yPos + 7);\n  \n  const filename = `chai-fi-menu-sales-${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(filename);\n};\n","size_bytes":6572},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Download, IndianRupee, Receipt, Trash2, Users, TrendingUp, BarChart3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from \"recharts\";\nimport { generateDailySummaryPDF, generateWeeklySummaryPDF, generateMonthlySummaryPDF, generateMenuSalesPDF } from \"@/lib/pdf\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { DailySummary, WeeklySummary, MonthlySummary } from \"@shared/schema\";\n\ntype CreditorSummary = {\n  name: string;\n  totalAmount: number;\n};\n\ntype MenuItemSales = {\n  name: string;\n  count: number;\n};\n\nexport default function DashboardPage() {\n  const [selectedPeriod, setSelectedPeriod] = useState<\"today\" | \"week\" | \"month\">(\"today\");\n  const [clearPeriod, setClearPeriod] = useState<\"day\" | \"week\" | \"month\">(\"day\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: dailySummaries = [] } = useQuery<DailySummary[]>({\n    queryKey: [\"/api/summaries/daily\"],\n  });\n\n  const { data: weeklySummaries = [] } = useQuery<WeeklySummary[]>({\n    queryKey: [\"/api/summaries/weekly\"],\n  });\n\n  const { data: monthlySummaries = [] } = useQuery<MonthlySummary[]>({\n    queryKey: [\"/api/summaries/monthly\"],\n  });\n\n  const { data: creditorSummary = [], isLoading: creditorSummaryLoading, error: creditorSummaryError } = useQuery<CreditorSummary[]>({\n    queryKey: [\"/api/creditors/summary\"],\n  });\n\n  const today = new Date().toISOString().split('T')[0];\n  const { data: menuItemSales = [], isLoading: menuItemSalesLoading, error: menuItemSalesError } = useQuery<MenuItemSales[]>({\n    queryKey: [\"/api/menu-items/sales\"],\n  });\n\n  const todaySummary = dailySummaries.find(s => s.date === today);\n  const currentWeek = weeklySummaries[0];\n  const currentMonth = monthlySummaries[0];\n\n  // Calculate total creditor balance\n  const totalCreditorBalance = creditorSummary.reduce((sum, creditor) => sum + creditor.totalAmount, 0);\n\n  // Prepare chart data\n  const chartData = menuItemSales.slice(0, 10).map(item => ({\n    name: item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name,\n    sales: item.count,\n  }));\n\n  const chartConfig = {\n    sales: {\n      label: \"Sales Count\",\n      color: \"hsl(var(--primary))\",\n    },\n  };\n\n  const handleClearData = async () => {\n    try {\n      let dateParam = today;\n      \n      if (clearPeriod === 'week') {\n        // Get Monday of current week\n        const currentDate = new Date();\n        const day = currentDate.getDay();\n        const diff = currentDate.getDate() - day + (day === 0 ? -6 : 1);\n        const monday = new Date(currentDate.setDate(diff));\n        dateParam = monday.toISOString().split('T')[0];\n      } else if (clearPeriod === 'month') {\n        dateParam = today.substring(0, 7); // YYYY-MM format\n      }\n\n      const response = await fetch(`/api/data/clear?period=${clearPeriod}&date=${dateParam}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Data Cleared\",\n          description: result.message,\n        });\n        \n        // Refresh all queries\n        queryClient.invalidateQueries({ queryKey: [\"/api/summaries/daily\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/summaries/weekly\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/summaries/monthly\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/creditors/summary\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/menu-items/sales\"] });\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.error || \"Failed to clear data\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownloadDaily = async () => {\n    if (!todaySummary) return;\n    \n    try {\n      await generateDailySummaryPDF(todaySummary, []);\n    } catch (error) {\n      console.error(\"Failed to generate daily PDF:\", error);\n    }\n  };\n\n  const handleDownloadWeekly = async () => {\n    if (!currentWeek) return;\n    \n    try {\n      await generateWeeklySummaryPDF(currentWeek, []);\n    } catch (error) {\n      console.error(\"Failed to generate weekly PDF:\", error);\n    }\n  };\n\n  const handleDownloadMonthly = async () => {\n    if (!currentMonth) return;\n    \n    try {\n      await generateMonthlySummaryPDF(currentMonth, []);\n    } catch (error) {\n      console.error(\"Failed to generate monthly PDF:\", error);\n    }\n  };\n\n  const handleDownloadMenuSales = async () => {\n    if (!menuItemSales || menuItemSales.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No menu sales data available to download\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      await generateMenuSalesPDF(menuItemSales);\n      toast({\n        title: \"PDF Downloaded\",\n        description: \"Menu sales report has been downloaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Failed to generate menu sales PDF:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate menu sales PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"dashboard-title\">Dashboard</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"dashboard-subtitle\">Transaction summaries and analytics</p>\n            </div>\n            \n            {/* Clear Data Button */}\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 border-red-200 hover:bg-red-50\">\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Clear Data\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Clear Data</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    This action will permanently delete data from both frontend and MongoDB backend. This cannot be undone.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <div className=\"py-4\">\n                  <label className=\"text-sm font-medium mb-2 block\">Select period to clear:</label>\n                  <Select value={clearPeriod} onValueChange={(value: \"day\" | \"week\" | \"month\") => setClearPeriod(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"day\">Today's Data</SelectItem>\n                      <SelectItem value=\"week\">This Week's Data</SelectItem>\n                      <SelectItem value=\"month\">This Month's Data</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={handleClearData} className=\"bg-red-600 hover:bg-red-700\">\n                    Clear Data\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n          \n          <div className=\"flex space-x-4\">\n            <Button \n              variant={selectedPeriod === \"today\" ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedPeriod(\"today\")}\n              data-testid=\"button-period-today\"\n            >\n              Today\n            </Button>\n            <Button \n              variant={selectedPeriod === \"week\" ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedPeriod(\"week\")}\n              data-testid=\"button-period-week\"\n            >\n              Week\n            </Button>\n            <Button \n              variant={selectedPeriod === \"month\" ? \"default\" : \"secondary\"}\n              onClick={() => setSelectedPeriod(\"month\")}\n              data-testid=\"button-period-month\"\n            >\n              Month\n            </Button>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <IndianRupee className=\"text-primary text-xl\" />\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-today-label\">Today</span>\n              </div>\n              <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-daily-total\">\n                ₹{todaySummary?.totalAmount || \"0.00\"}\n              </div>\n              <div className=\"text-sm text-green-600\" data-testid=\"text-daily-growth\">+0% from yesterday</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-green-600 text-xl font-bold\">G</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-gpay-label\">GPay</span>\n              </div>\n              <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-gpay-total\">\n                ₹{todaySummary?.gpayAmount || \"0.00\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"text-gpay-percentage\">\n                {todaySummary ? Math.round((parseFloat(todaySummary.gpayAmount) / parseFloat(todaySummary.totalAmount)) * 100) : 0}% of total\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-gray-500/10 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-gray-600 text-xl\">₹</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-cash-label\">Cash</span>\n              </div>\n              <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-cash-total\">\n                ₹{todaySummary?.cashAmount || \"0.00\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"text-cash-percentage\">\n                {todaySummary ? Math.round((parseFloat(todaySummary.cashAmount) / parseFloat(todaySummary.totalAmount)) * 100) : 0}% of total\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                  <Receipt className=\"text-blue-600 text-xl\" />\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-orders-label\">Orders</span>\n              </div>\n              <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-order-count\">\n                {todaySummary?.orderCount || 0}\n              </div>\n              <div className=\"text-sm text-green-600\" data-testid=\"text-order-growth\">+0 from yesterday</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Creditor Summary */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold text-secondary\">Creditor Summary</h2>\n                <div className=\"w-12 h-12 bg-red-500/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-red-600 text-xl\" />\n                </div>\n              </div>\n              \n              {creditorSummaryLoading ? (\n                <div className=\"text-center py-4\">Loading creditor data...</div>\n              ) : creditorSummaryError ? (\n                <div className=\"text-center py-4 text-red-600\">Error loading creditor data</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-4 bg-red-50 rounded-lg border border-red-200\">\n                    <div>\n                      <div className=\"font-medium text-red-700\">Total Outstanding</div>\n                      <div className=\"text-sm text-red-600\">\n                        {creditorSummary?.length || 0} creditors\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-red-800\">\n                        ₹{creditorSummary?.reduce((sum, creditor) => sum + creditor.totalAmount, 0).toFixed(2) || \"0.00\"}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {creditorSummary && creditorSummary.length > 0 && (\n                    <div className=\"max-h-48 overflow-y-auto\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left py-2\">Creditor</th>\n                            <th className=\"text-right py-2\">Amount Due</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {creditorSummary.map((creditor, index) => (\n                            <tr key={index} className=\"border-b border-gray-100\">\n                              <td className=\"py-2\">{creditor.name}</td>\n                              <td className=\"text-right py-2 font-medium text-red-600\">\n                                ₹{creditor.totalAmount.toFixed(2)}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Transaction Summary */}\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-secondary\" data-testid=\"daily-summary-title\">Daily Summary</h2>\n                <Button \n                  onClick={handleDownloadDaily}\n                  className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg text-sm hover:bg-accent transition-colors\"\n                  disabled={!todaySummary}\n                  data-testid=\"button-download-daily\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Download\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center p-4 bg-muted rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-secondary\" data-testid=\"text-total-sales\">Total Sales</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"text-today-orders\">\n                      Today • {todaySummary?.orderCount || 0} orders\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-primary\" data-testid=\"text-today-total\">\n                      ₹{todaySummary?.totalAmount || \"0.00\"}\n                    </div>\n                    <div className=\"text-sm text-green-600\" data-testid=\"text-today-change\">+0%</div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"text-sm text-green-700 mb-1\" data-testid=\"text-gpay-payments\">GPay Payments</div>\n                    <div className=\"text-lg font-bold text-green-800\" data-testid=\"text-gpay-amount\">\n                      ₹{todaySummary?.gpayAmount || \"0.00\"}\n                    </div>\n                  </div>\n                  <div className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                    <div className=\"text-sm text-gray-700 mb-1\" data-testid=\"text-cash-payments\">Cash Payments</div>\n                    <div className=\"text-lg font-bold text-gray-800\" data-testid=\"text-cash-amount\">\n                      ₹{todaySummary?.cashAmount || \"0.00\"}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-secondary\" data-testid=\"weekly-summary-title\">Weekly Summary</h2>\n                <Button \n                  onClick={handleDownloadWeekly}\n                  className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg text-sm hover:bg-accent transition-colors\"\n                  disabled={!currentWeek}\n                  data-testid=\"button-download-weekly\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Download\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center p-4 bg-muted rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-secondary\" data-testid=\"text-week-total\">Week Total</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"text-week-orders\">\n                      {currentWeek ? `${currentWeek.weekStart} to ${currentWeek.weekEnd} • ${currentWeek.orderCount} orders` : \"No data\"}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-primary\" data-testid=\"text-week-amount\">\n                      ₹{currentWeek?.totalAmount || \"0.00\"}\n                    </div>\n                    <div className=\"text-sm text-green-600\" data-testid=\"text-week-change\">+0%</div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"text-sm text-green-700 mb-1\" data-testid=\"text-week-gpay\">GPay Total</div>\n                    <div className=\"text-lg font-bold text-green-800\" data-testid=\"text-week-gpay-amount\">\n                      ₹{currentWeek?.gpayAmount || \"0.00\"}\n                    </div>\n                  </div>\n                  <div className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                    <div className=\"text-sm text-gray-700 mb-1\" data-testid=\"text-week-cash\">Cash Total</div>\n                    <div className=\"text-lg font-bold text-gray-800\" data-testid=\"text-week-cash-amount\">\n                      ₹{currentWeek?.cashAmount || \"0.00\"}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Monthly Summary */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-semibold text-secondary\" data-testid=\"monthly-summary-title\">Monthly Summary</h2>\n              <Button \n                onClick={handleDownloadMonthly}\n                className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg text-sm hover:bg-accent transition-colors\"\n                disabled={!currentMonth}\n                data-testid=\"button-download-monthly\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                Download\n              </Button>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"p-6 invoice-gradient text-white rounded-xl\">\n                <div className=\"mb-4\">\n                  <div className=\"text-sm opacity-90\" data-testid=\"text-month-period\">\n                    {currentMonth ? new Date(currentMonth.month + '-01').toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) : \"No data\"}\n                  </div>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-month-total\">\n                    ₹{currentMonth?.totalAmount || \"0.00\"}\n                  </div>\n                </div>\n                <div className=\"text-sm opacity-90\" data-testid=\"text-month-orders\">\n                  {currentMonth?.orderCount || 0} total orders\n                </div>\n              </div>\n              \n              <div className=\"p-6 bg-green-50 rounded-xl border border-green-200\">\n                <div className=\"mb-4\">\n                  <div className=\"text-sm text-green-700\" data-testid=\"text-month-gpay-label\">GPay Payments</div>\n                  <div className=\"text-2xl font-bold text-green-800\" data-testid=\"text-month-gpay-total\">\n                    ₹{currentMonth?.gpayAmount || \"0.00\"}\n                  </div>\n                </div>\n                <div className=\"text-sm text-green-600\" data-testid=\"text-month-gpay-percentage\">\n                  {currentMonth ? ((parseFloat(currentMonth.gpayAmount) / parseFloat(currentMonth.totalAmount)) * 100).toFixed(1) : 0}% of total\n                </div>\n              </div>\n              \n              <div className=\"p-6 bg-gray-50 rounded-xl border border-gray-200\">\n                <div className=\"mb-4\">\n                  <div className=\"text-sm text-gray-700\" data-testid=\"text-month-cash-label\">Cash Payments</div>\n                  <div className=\"text-2xl font-bold text-gray-800\" data-testid=\"text-month-cash-total\">\n                    ₹{currentMonth?.cashAmount || \"0.00\"}\n                  </div>\n                </div>\n                <div className=\"text-sm text-gray-600\" data-testid=\"text-month-cash-percentage\">\n                  {currentMonth ? ((parseFloat(currentMonth.cashAmount) / parseFloat(currentMonth.totalAmount)) * 100).toFixed(1) : 0}% of total\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Menu Item Sales Analytics */}\n        <div className=\"mt-8 grid lg:grid-cols-2 gap-8\">\n          {/* Sales Table */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-secondary\">Today's Menu Sales</h2>\n                <div className=\"flex items-center gap-3\">\n                  <Button \n                    onClick={handleDownloadMenuSales}\n                    className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg text-sm hover:bg-accent transition-colors\"\n                    disabled={!menuItemSales || menuItemSales.length === 0}\n                    data-testid=\"button-download-menu-sales\"\n                  >\n                    <Download className=\"mr-2\" size={16} />\n                    Download PDF\n                  </Button>\n                  <div className=\"w-12 h-12 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n                    <BarChart3 className=\"text-purple-600 text-xl\" />\n                  </div>\n                </div>\n              </div>\n              \n              {menuItemSalesLoading ? (\n                <div className=\"text-center py-4\">Loading sales data...</div>\n              ) : menuItemSalesError ? (\n                <div className=\"text-center py-4 text-red-600\">Error loading sales data</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {menuItemSales && menuItemSales.length > 0 ? (\n                    <div className=\"max-h-64 overflow-y-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Menu Item</TableHead>\n                            <TableHead className=\"text-right\">Sales Count</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {menuItemSales.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell className=\"font-medium\">{item.name}</TableCell>\n                              <TableCell className=\"text-right font-bold text-purple-600\">\n                                {item.count}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No sales data available for today\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Sales Chart */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-secondary\">Sales Visualization</h2>\n                <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-green-600 text-xl\" />\n                </div>\n              </div>\n              \n              {menuItemSalesLoading ? (\n                <div className=\"text-center py-4\">Loading chart data...</div>\n              ) : menuItemSalesError ? (\n                <div className=\"text-center py-4 text-red-600\">Error loading chart data</div>\n              ) : (\n                <div className=\"h-64\">\n                  {menuItemSales && menuItemSales.length > 0 ? (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={menuItemSales} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis \n                          dataKey=\"name\" \n                          angle={-45}\n                          textAnchor=\"end\"\n                          height={80}\n                          fontSize={12}\n                        />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                      No data to display\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* MongoDB Connection Info */}\n        <div className=\"mt-8 bg-blue-50 border border-blue-200 rounded-xl p-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <span className=\"text-blue-600 font-bold\">DB</span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-blue-900 mb-2\" data-testid=\"mongodb-title\">MongoDB Atlas Integration</h3>\n              <p className=\"text-blue-800 text-sm mb-3\" data-testid=\"mongodb-description\">\n                All transactions are automatically stored in MongoDB Atlas for reliable data persistence and analytics.\n              </p>\n              <div className=\"text-xs text-blue-700\" data-testid=\"mongodb-instructions\">\n                <strong>Setup Instructions:</strong> Configure your MongoDB Atlas connection string in the environment variables. \n                All daily, weekly, and monthly summaries are generated from real transaction data.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30034},"client/src/pages/invoice.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Share, Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { generateInvoicePDF } from \"@/lib/pdf\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function InvoicePage() {\n  const [, navigate] = useLocation();\n  const [transaction, setTransaction] = useState<Transaction | null>(null);\n\n  useEffect(() => {\n    const savedTransaction = localStorage.getItem(\"currentTransaction\");\n    if (savedTransaction) {\n      setTransaction(JSON.parse(savedTransaction));\n    } else {\n      navigate(\"/menu\");\n    }\n  }, [navigate]);\n\n  const handleSharePDF = async () => {\n    if (!transaction) return;\n    \n    try {\n      await generateInvoicePDF(transaction);\n    } catch (error) {\n      console.error(\"Failed to generate PDF:\", error);\n    }\n  };\n\n  if (!transaction) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading invoice...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const items = Array.isArray(transaction.items) ? transaction.items : [];\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center\">\n            <Button \n              variant=\"ghost\"\n              onClick={() => navigate(\"/payment\")}\n              className=\"mr-4 p-2 hover:bg-muted rounded-lg transition-colors\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"text-secondary\" />\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"invoice-title\">Invoice</h1>\n              <p className=\"text-muted-foreground\" data-testid=\"invoice-subtitle\">Payment successful</p>\n            </div>\n          </div>\n          <Button \n            onClick={handleSharePDF}\n            className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg font-semibold hover:bg-accent transition-colors\"\n            data-testid=\"button-share-pdf\"\n          >\n            <Share className=\"mr-2\" size={20} />\n            Share PDF\n          </Button>\n        </div>\n\n        {/* Invoice Card */}\n        <Card className=\"shadow-lg overflow-hidden\">\n          {/* Invoice Header */}\n          <div className=\"invoice-gradient text-white p-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <div className=\"w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center\">\n                    <Coffee className=\"text-2xl\" />\n                  </div>\n                  <h2 className=\"text-3xl font-bold\" data-testid=\"invoice-app-name\">Chai-Fi</h2>\n                </div>\n                <p className=\"opacity-90\" data-testid=\"invoice-tagline\">Modern Billing Solution</p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold\" data-testid=\"invoice-number\">#{transaction.id.slice(-6).toUpperCase()}</div>\n                <div className=\"opacity-90\" data-testid=\"invoice-label\">Invoice</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Invoice Details */}\n          <CardContent className=\"p-8\">\n            <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n              <div>\n                <h3 className=\"font-semibold text-secondary mb-3\" data-testid=\"bill-details-title\">Bill Details</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Date:</span>\n                    <span className=\"text-secondary\" data-testid=\"text-bill-date\">{transaction.date}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Day:</span>\n                    <span className=\"text-secondary\" data-testid=\"text-bill-day\">{transaction.dayName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Time:</span>\n                    <span className=\"text-secondary\" data-testid=\"text-bill-time\">{transaction.time}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Biller:</span>\n                    <span className=\"text-secondary\" data-testid=\"text-biller-name\">{transaction.billerName}</span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-secondary mb-3\" data-testid=\"payment-details-title\">Payment Details</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Method:</span>\n                    <span className=\"text-secondary capitalize\" data-testid=\"text-payment-method\">\n                      {transaction.paymentMethod === \"gpay\" ? \"Google Pay\" : \n                       transaction.paymentMethod === \"cash\" ? \"Cash\" :\n                       transaction.paymentMethod === \"split\" ? \"Cash + GPay\" :\n                       transaction.paymentMethod === \"creditor\" ? \"Creditor\" : transaction.paymentMethod}\n                    </span>\n                  </div>\n                  {transaction.paymentMethod === \"split\" && transaction.splitPayment && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground ml-4\">GPay Amount:</span>\n                        <span className=\"text-secondary\" data-testid=\"text-split-gpay-amount\">\n                          ₹{(transaction.splitPayment as any).gpayAmount?.toFixed(2) || \"0.00\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground ml-4\">Cash Amount:</span>\n                        <span className=\"text-secondary\" data-testid=\"text-split-cash-amount\">\n                          ₹{(transaction.splitPayment as any).cashAmount?.toFixed(2) || \"0.00\"}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                  {transaction.paymentMethod === \"creditor\" && transaction.creditor && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground ml-4\">Customer:</span>\n                        <span className=\"text-secondary\" data-testid=\"text-creditor-name\">\n                          {(transaction.creditor as any).name}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground ml-4\">Paid:</span>\n                        <span className=\"text-secondary\" data-testid=\"text-creditor-paid\">\n                          ₹{(transaction.creditor as any).paidAmount?.toFixed(2) || \"0.00\"}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground ml-4\">Balance:</span>\n                        <span className=\"text-red-600 font-medium\" data-testid=\"text-creditor-balance\">\n                          ₹{(transaction.creditor as any).balanceAmount?.toFixed(2) || \"0.00\"}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Status:</span>\n                    <span className=\"text-green-600 font-medium\" data-testid=\"text-payment-status\">Paid</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Items */}\n            <div className=\"mb-8\">\n              <h3 className=\"font-semibold text-secondary mb-4\" data-testid=\"items-ordered-title\">Items Ordered</h3>\n              <div className=\"space-y-3\">\n                {items.map((item: any, index: number) => (\n                  <div \n                    key={index} \n                    className=\"flex justify-between items-center p-3 bg-muted rounded-lg\"\n                    data-testid={`invoice-item-${index}`}\n                  >\n                    <div>\n                      <span className=\"font-medium text-secondary\" data-testid={`text-invoice-item-name-${index}`}>\n                        {item.name}\n                      </span>\n                      <span className=\"text-muted-foreground ml-2\" data-testid={`text-invoice-item-quantity-${index}`}>\n                        x{item.quantity}\n                      </span>\n                    </div>\n                    <span className=\"font-semibold text-primary\" data-testid={`text-invoice-item-total-${index}`}>\n                      ₹{(parseFloat(item.price) * item.quantity).toFixed(2)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Total */}\n            <div className=\"border-t border-border pt-6\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-xl font-bold text-secondary\">Total Amount</span>\n                <span className=\"text-2xl font-bold text-primary\" data-testid=\"text-invoice-total\">\n                  ₹{transaction.totalAmount}\n                </span>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"mt-8 pt-6 border-t border-border text-center\">\n              <p className=\"text-muted-foreground text-sm\" data-testid=\"text-thank-you\">Thank you for choosing Chai-Fi!</p>\n              <p className=\"text-muted-foreground text-xs mt-1\" data-testid=\"text-support\">For support, contact us at support@chai-fi.com</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-4 mt-8\">\n          <Button \n            onClick={() => navigate(\"/menu\")}\n            className=\"flex-1 bg-secondary text-secondary-foreground py-3 rounded-lg font-semibold hover:bg-secondary/90 transition-colors\"\n            data-testid=\"button-new-order\"\n          >\n            New Order\n          </Button>\n          <Button \n            onClick={() => navigate(\"/dashboard\")}\n            className=\"flex-1 bg-primary text-primary-foreground py-3 rounded-lg font-semibold hover:bg-accent transition-colors\"\n            data-testid=\"button-view-dashboard\"\n          >\n            View Dashboard\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11315},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { setAuthToken } from \"@/lib/auth\";\n\nexport default function LoginPage() {\n  const [, navigate] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        username,\n        password,\n      });\n      \n      const data = await response.json();\n      setAuthToken(data.user.id);\n      \n      toast({\n        title: \"Login successful\",\n        description: `Welcome ${data.user.username}!`,\n      });\n      \n      // Redirect based on user type\n      if (data.user.username === \"Inowara\") {\n        navigate(\"/admin\");\n      } else {\n        navigate(\"/menu\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-muted flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-primary rounded-full flex items-center justify-center\">\n              <Coffee className=\"text-2xl text-primary-foreground\" size={32} />\n            </div>\n            <h2 className=\"text-2xl font-bold text-secondary\" data-testid=\"login-title\">Welcome Back</h2>\n            <p className=\"text-muted-foreground mt-2\" data-testid=\"login-subtitle\">Sign in to your Chai-Fi account</p>\n          </div>\n          \n          <form onSubmit={handleLogin} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-secondary mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-username\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-secondary mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary text-primary-foreground py-3 rounded-lg font-semibold hover:bg-accent transition-colors\"\n              disabled={isLoading}\n              data-testid=\"button-sign-in\"\n            >\n              {isLoading ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3665},"client/src/pages/menu.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ShoppingCart, Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { MenuItem, CartItem } from \"@shared/schema\";\n\nconst categories = [\"All Items\", \"Tea\", \"Coffee\", \"Snacks\", \"Beverages\"];\n\nexport default function MenuPage() {\n  const [, navigate] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState(\"All Items\");\n  const [cart, setCart] = useState<CartItem[]>([]);\n\n  const { data: menuItems = [], isLoading } = useQuery<MenuItem[]>({\n    queryKey: [\"/api/menu\"],\n  });\n\n  const filteredItems = selectedCategory === \"All Items\" \n    ? menuItems \n    : menuItems.filter(item => item.category === selectedCategory);\n\n  const cartCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n\n  const addToCart = (item: MenuItem) => {\n    setCart(prev => {\n      const existing = prev.find(cartItem => cartItem.id === item.id);\n      if (existing) {\n        return prev.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem\n        );\n      }\n      return [...prev, { id: item.id, name: item.name, price: item.price, quantity: 1 }];\n    });\n  };\n\n  const removeFromCart = (item: MenuItem) => {\n    setCart(prev => {\n      const existing = prev.find(cartItem => cartItem.id === item.id);\n      if (existing && existing.quantity > 1) {\n        return prev.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity - 1 }\n            : cartItem\n        );\n      } else if (existing && existing.quantity === 1) {\n        return prev.filter(cartItem => cartItem.id !== item.id);\n      }\n      return prev;\n    });\n  };\n\n  const getItemQuantity = (itemId: string): number => {\n    const cartItem = cart.find(item => item.id === itemId);\n    return cartItem ? cartItem.quantity : 0;\n  };\n\n  const goToPayment = () => {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n    navigate(\"/payment\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading menu...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"menu-title\">Menu</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"menu-subtitle\">Select items to add to your order</p>\n          </div>\n          <Button \n            onClick={goToPayment}\n            className=\"relative bg-primary text-primary-foreground px-6 py-3 rounded-lg font-semibold hover:bg-accent transition-colors\"\n            disabled={cartCount === 0}\n            data-testid=\"button-cart\"\n          >\n            <ShoppingCart className=\"mr-2\" size={20} />\n            Cart\n            {cartCount > 0 && (\n              <Badge className=\"cart-badge absolute -top-2 -right-2 w-6 h-6 text-xs rounded-full flex items-center justify-center text-white\" data-testid=\"cart-count\">\n                {cartCount}\n              </Badge>\n            )}\n          </Button>\n        </div>\n\n        {/* Menu Categories */}\n        <div className=\"mb-6\">\n          <div className=\"flex space-x-4 overflow-x-auto pb-2\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                onClick={() => setSelectedCategory(category)}\n                variant={selectedCategory === category ? \"default\" : \"secondary\"}\n                className=\"whitespace-nowrap\"\n                data-testid={`button-category-${category.toLowerCase().replace(' ', '-')}`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Menu Items Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {filteredItems.map((item) => (\n            <div \n              key={item.id} \n              className=\"bg-card rounded-xl shadow-sm border border-border overflow-hidden hover:shadow-md transition-shadow\"\n              data-testid={`card-menu-item-${item.id}`}\n            >\n              <img \n                src={item.image} \n                alt={item.name} \n                className=\"w-full h-48 object-cover\"\n                data-testid={`img-menu-item-${item.id}`}\n              />\n              <div className=\"p-4\">\n                <h3 className=\"font-semibold text-secondary mb-1\" data-testid={`text-item-name-${item.id}`}>\n                  {item.name}\n                </h3>\n                <p className=\"text-muted-foreground text-sm mb-3\" data-testid={`text-item-description-${item.id}`}>\n                  {item.description}\n                </p>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-bold text-primary\" data-testid={`text-item-price-${item.id}`}>\n                    ₹{item.price}\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    {getItemQuantity(item.id) > 0 && (\n                      <Button\n                        onClick={() => removeFromCart(item)}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"w-8 h-8 rounded-full p-0 border-2\"\n                        data-testid={`button-decrease-${item.id}`}\n                      >\n                        <Minus size={14} />\n                      </Button>\n                    )}\n                    {getItemQuantity(item.id) > 0 && (\n                      <span \n                        className=\"min-w-[2rem] text-center font-semibold text-primary\"\n                        data-testid={`text-quantity-${item.id}`}\n                      >\n                        {getItemQuantity(item.id)}\n                      </span>\n                    )}\n                    <Button\n                      onClick={() => addToCart(item)}\n                      size=\"sm\"\n                      className=\"bg-primary text-primary-foreground w-8 h-8 rounded-full hover:bg-accent transition-colors p-0\"\n                      data-testid={`button-add-to-cart-${item.id}`}\n                    >\n                      <Plus size={16} />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredItems.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-items\">\n              No items found in this category.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7192},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CartItem } from \"@shared/schema\";\n\nexport default function PaymentPage() {\n  const [, navigate] = useLocation();\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [total, setTotal] = useState(0);\n  const [manualTotal, setManualTotal] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState<\"gpay\" | \"cash\" | \"split\" | null>(null);\n  const [splitGpayAmount, setSplitGpayAmount] = useState(\"\");\n  const [splitCashAmount, setSplitCashAmount] = useState(\"\");\n  const [extras, setExtras] = useState([\n    { name: \"extras\", amount: \"\" },\n    { name: \"cooldrinks\", amount: \"\" },\n    { name: \"chocolate\", amount: \"\" }\n  ]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const savedCart = localStorage.getItem(\"cart\");\n    if (savedCart) {\n      const cartItems: CartItem[] = JSON.parse(savedCart);\n      setCart(cartItems);\n      const calculatedTotal = cartItems.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);\n      setTotal(calculatedTotal);\n      setManualTotal(calculatedTotal.toString());\n    } else {\n      navigate(\"/menu\");\n    }\n  }, [navigate]);\n\n  // Keep manualTotal as base amount, calculate final total separately\n  const extrasTotal = extras.reduce((sum, extra) => sum + (parseFloat(extra.amount) || 0), 0);\n  const finalTotal = (parseFloat(manualTotal) || 0) + extrasTotal;\n\n  const updateExtraField = (index: number, field: string, value: string) => {\n    setExtras(prev => prev.map((extra, i) => \n      i === index ? { ...extra, [field]: value } : extra\n    ));\n  };\n\n  const handlePayment = async () => {\n    if (!paymentMethod) {\n      toast({\n        title: \"Payment method required\",\n        description: \"Please select a payment method.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"split\") {\n      const gpay = parseFloat(splitGpayAmount) || 0;\n      const cash = parseFloat(splitCashAmount) || 0;\n      const total = parseFloat(manualTotal) || 0;\n      \n      if (Math.abs((gpay + cash) - total) > 0.01) {\n        toast({\n          title: \"Split payment mismatch\",\n          description: \"GPay + Cash amounts must equal the total amount.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const now = new Date();\n      const transactionData = {\n        items: cart,\n        totalAmount: finalTotal.toFixed(2),\n        paymentMethod,\n        billerName: \"Sriram\",\n        date: now.toISOString().split('T')[0],\n        dayName: now.toLocaleDateString('en-US', { weekday: 'long' }),\n        time: now.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }),\n        ...(paymentMethod === \"split\" && {\n          splitPayment: {\n            gpayAmount: parseFloat(splitGpayAmount) || 0,\n            cashAmount: parseFloat(splitCashAmount) || 0\n          }\n        }),\n        extras: extras.filter(extra => extra.name && parseFloat(extra.amount) > 0)\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n      const transaction = await response.json();\n\n      localStorage.setItem(\"currentTransaction\", JSON.stringify(transaction));\n      localStorage.removeItem(\"cart\");\n\n      toast({\n        title: \"Payment successful\",\n        description: \"Your order has been processed.\",\n      });\n\n      navigate(\"/invoice\");\n    } catch (error) {\n      toast({\n        title: \"Payment failed\",\n        description: \"There was an error processing your payment.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/menu\")}\n            className=\"mr-4 p-2 hover:bg-muted rounded-lg transition-colors\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"text-secondary\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"payment-title\">Payment</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"payment-subtitle\">Review your order and complete payment</p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Order Summary */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-secondary mb-4\" data-testid=\"order-summary-title\">Order Summary</h2>\n              \n              <div className=\"space-y-4 mb-6\">\n                {cart.map((item) => (\n                  <div \n                    key={item.id} \n                    className=\"flex justify-between items-center py-2 border-b border-border\"\n                    data-testid={`order-item-${item.id}`}\n                  >\n                    <div>\n                      <span className=\"font-medium text-secondary\" data-testid={`text-item-name-${item.id}`}>\n                        {item.name}\n                      </span>\n                      <span className=\"text-muted-foreground ml-2\" data-testid={`text-item-quantity-${item.id}`}>\n                        x{item.quantity}\n                      </span>\n                    </div>\n                    <span className=\"font-semibold text-primary\" data-testid={`text-item-total-${item.id}`}>\n                      ₹{(parseFloat(item.price) * item.quantity).toFixed(2)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n\n              {/* Manual Total Adjustment */}\n              <div className=\"mb-6\">\n                <Label htmlFor=\"manual-total\" className=\"block text-sm font-medium text-secondary mb-2\">\n                  Adjust Total Amount\n                </Label>\n                <Input\n                  id=\"manual-total\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={manualTotal}\n                  onChange={(e) => setManualTotal(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-manual-total\"\n                />\n              </div>\n\n              {/* Extra Items */}\n              <div className=\"mb-6\">\n                <Label className=\"block text-sm font-medium text-secondary mb-3\">\n                  Additional Items\n                </Label>\n                <div className=\"space-y-3\">\n                  {extras.map((extra, index) => (\n                    <div key={index} className=\"grid grid-cols-2 gap-3\">\n                      <Input\n                        type=\"text\"\n                        value={extra.name}\n                        onChange={(e) => updateExtraField(index, 'name', e.target.value)}\n                        placeholder=\"Item name\"\n                        className=\"capitalize\"\n                        data-testid={`input-extra-name-${index}`}\n                      />\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={extra.amount}\n                        onChange={(e) => updateExtraField(index, 'amount', e.target.value)}\n                        placeholder=\"Amount\"\n                        data-testid={`input-extra-amount-${index}`}\n                      />\n                    </div>\n                  ))}\n                </div>\n                {extrasTotal > 0 && (\n                  <div className=\"mt-3 text-sm font-medium text-primary\">\n                    Extras Total: ₹{extrasTotal.toFixed(2)}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"border-t border-border pt-4\">\n                <div className=\"flex justify-between items-center text-lg font-bold\">\n                  <span className=\"text-secondary\">Total</span>\n                  <span className=\"text-primary\" data-testid=\"text-final-total\">₹{finalTotal.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Options */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-secondary mb-4\" data-testid=\"payment-method-title\">Payment Method</h2>\n              \n              <div className=\"space-y-4 mb-6\">\n                <label className=\"flex items-center p-4 border border-border rounded-lg cursor-pointer hover:bg-muted transition-colors\">\n                  <Checkbox \n                    checked={paymentMethod === \"gpay\"}\n                    onCheckedChange={(checked) => setPaymentMethod(checked ? \"gpay\" : null)}\n                    className=\"w-5 h-5\"\n                    data-testid=\"checkbox-gpay\"\n                  />\n                  <div className=\"ml-4 flex items-center\">\n                    <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                      <span className=\"text-primary-foreground font-bold\">G</span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-secondary\" data-testid=\"text-gpay-title\">Google Pay</div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid=\"text-gpay-description\">Pay securely with GPay</div>\n                    </div>\n                  </div>\n                </label>\n\n                <label className=\"flex items-center p-4 border border-border rounded-lg cursor-pointer hover:bg-muted transition-colors\">\n                  <Checkbox \n                    checked={paymentMethod === \"cash\"}\n                    onCheckedChange={(checked) => setPaymentMethod(checked ? \"cash\" : null)}\n                    className=\"w-5 h-5\"\n                    data-testid=\"checkbox-cash\"\n                  />\n                  <div className=\"ml-4 flex items-center\">\n                    <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center mr-3\">\n                      <span className=\"text-white\">₹</span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-secondary\" data-testid=\"text-cash-title\">Cash</div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid=\"text-cash-description\">Pay with cash</div>\n                    </div>\n                  </div>\n                </label>\n\n                <label className=\"flex items-center p-4 border border-border rounded-lg cursor-pointer hover:bg-muted transition-colors\">\n                  <Checkbox \n                    checked={paymentMethod === \"split\"}\n                    onCheckedChange={(checked) => setPaymentMethod(checked ? \"split\" : null)}\n                    className=\"w-5 h-5\"\n                    data-testid=\"checkbox-split\"\n                  />\n                  <div className=\"ml-4 flex items-center\">\n                    <div className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center mr-3\">\n                      <span className=\"text-accent-foreground font-bold\">G₹</span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-secondary\" data-testid=\"text-split-title\">Cash + GPay</div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid=\"text-split-description\">Split payment between cash and GPay</div>\n                    </div>\n                  </div>\n                </label>\n              </div>\n\n              {/* Split Payment Details */}\n              {paymentMethod === \"split\" && (\n                <div className=\"mb-6 p-4 bg-muted rounded-lg\">\n                  <h3 className=\"font-medium text-secondary mb-3\">Split Payment Details</h3>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <Label htmlFor=\"gpay-amount\" className=\"block text-sm font-medium text-secondary mb-1\">\n                        GPay Amount\n                      </Label>\n                      <Input\n                        id=\"gpay-amount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={splitGpayAmount}\n                        onChange={(e) => setSplitGpayAmount(e.target.value)}\n                        placeholder=\"0.00\"\n                        className=\"w-full\"\n                        data-testid=\"input-split-gpay\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cash-amount\" className=\"block text-sm font-medium text-secondary mb-1\">\n                        Cash Amount\n                      </Label>\n                      <Input\n                        id=\"cash-amount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        value={splitCashAmount}\n                        onChange={(e) => setSplitCashAmount(e.target.value)}\n                        placeholder=\"0.00\"\n                        className=\"w-full\"\n                        data-testid=\"input-split-cash\"\n                      />\n                    </div>\n                  </div>\n                  \n                  {/* Split Payment Summary */}\n                  <div className=\"mt-4 p-3 bg-background rounded border\">\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Expected Total:</span>\n                        <span className=\"font-medium\">₹{finalTotal.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>GPay + Cash:</span>\n                        <span className=\"font-medium\">₹{((parseFloat(splitGpayAmount) || 0) + (parseFloat(splitCashAmount) || 0)).toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between border-t pt-2\">\n                        <span>Difference:</span>\n                        <span className={`font-medium ${\n                          Math.abs(finalTotal - ((parseFloat(splitGpayAmount) || 0) + (parseFloat(splitCashAmount) || 0))) < 0.01 \n                            ? 'text-green-600' \n                            : 'text-red-600'\n                        }`}>\n                          ₹{(finalTotal - ((parseFloat(splitGpayAmount) || 0) + (parseFloat(splitCashAmount) || 0))).toFixed(2)}\n                        </span>\n                      </div>\n                      {Math.abs(finalTotal - ((parseFloat(splitGpayAmount) || 0) + (parseFloat(splitCashAmount) || 0))) < 0.01 && (\n                        <div className=\"text-green-600 text-xs text-center font-medium\">✓ Split amounts match total</div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"space-y-3\">\n                <Button \n                  onClick={handlePayment}\n                  className=\"w-full bg-primary text-primary-foreground py-4 rounded-lg font-semibold text-lg hover:bg-accent transition-colors\"\n                  disabled={!paymentMethod || isProcessing}\n                  data-testid=\"button-complete-payment\"\n                >\n                  <Check className=\"mr-2\" size={20} />\n                  {isProcessing ? \"Processing...\" : \"Complete Payment\"}\n                </Button>\n\n                <Button \n                  onClick={() => navigate(\"/creditor\")}\n                  variant=\"outline\"\n                  className=\"w-full py-4 rounded-lg font-semibold text-lg border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground transition-colors\"\n                  data-testid=\"button-creditor\"\n                >\n                  Record as Creditor Sale\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16652},"client/src/pages/splash.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function SplashPage() {\n  const [, navigate] = useLocation();\n\n  return (\n    <div className=\"min-h-screen splash-gradient flex items-center justify-center\">\n      <div className=\"text-center text-white\">\n        <div className=\"w-32 h-32 mx-auto mb-8 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n          <Coffee className=\"text-6xl text-white\" size={64} />\n        </div>\n        <h1 className=\"text-6xl font-bold mb-4\" data-testid=\"app-title\">Chai-Fi</h1>\n        <p className=\"text-xl opacity-90 mb-8\" data-testid=\"app-subtitle\">Modern Billing Solution</p>\n        <Button \n          onClick={() => navigate(\"/login\")} \n          className=\"bg-white text-secondary px-8 py-3 rounded-lg font-semibold hover:bg-white/90 transition-colors\"\n          data-testid=\"button-get-started\"\n        >\n          Get Started\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1040},"client/src/types/cart.ts":{"content":"export interface CartItem {\n  id: string;\n  name: string;\n  price: string;\n  quantity: number;\n  imageUrl?: string;\n}\n\nexport interface CartState {\n  items: CartItem[];\n  total: number;\n}\n","size_bytes":188},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/cart.tsx":{"content":"import { ShoppingCart } from \"lucide-react\";\nimport { Button } from \"./button\";\nimport { Badge } from \"./badge\";\nimport type { CartItem } from \"@shared/schema\";\n\ninterface CartButtonProps {\n  cart: CartItem[];\n  onClick: () => void;\n}\n\nexport function CartButton({ cart, onClick }: CartButtonProps) {\n  const cartCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n\n  return (\n    <Button \n      onClick={onClick}\n      className=\"relative bg-primary text-primary-foreground px-6 py-3 rounded-lg font-semibold hover:bg-accent transition-colors\"\n      disabled={cartCount === 0}\n      data-testid=\"button-cart\"\n    >\n      <ShoppingCart className=\"mr-2\" size={20} />\n      Cart\n      {cartCount > 0 && (\n        <Badge className=\"cart-badge absolute -top-2 -right-2 w-6 h-6 text-xs rounded-full flex items-center justify-center text-white\" data-testid=\"cart-count\">\n          {cartCount}\n        </Badge>\n      )}\n    </Button>\n  );\n}\n","size_bytes":942},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menu-item.tsx":{"content":"import { Plus } from \"lucide-react\";\nimport { Button } from \"./button\";\nimport type { MenuItem } from \"@shared/schema\";\n\ninterface MenuItemProps {\n  item: MenuItem;\n  onAddToCart: (item: MenuItem) => void;\n}\n\nexport function MenuItemCard({ item, onAddToCart }: MenuItemProps) {\n  return (\n    <div \n      className=\"bg-card rounded-xl shadow-sm border border-border overflow-hidden hover:shadow-md transition-shadow\"\n      data-testid={`card-menu-item-${item.id}`}\n    >\n      <img \n        src={item.image} \n        alt={item.name} \n        className=\"w-full h-48 object-cover\"\n        data-testid={`img-menu-item-${item.id}`}\n      />\n      <div className=\"p-4\">\n        <h3 className=\"font-semibold text-secondary mb-1\" data-testid={`text-item-name-${item.id}`}>\n          {item.name}\n        </h3>\n        <p className=\"text-muted-foreground text-sm mb-3\" data-testid={`text-item-description-${item.id}`}>\n          {item.description}\n        </p>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-lg font-bold text-primary\" data-testid={`text-item-price-${item.id}`}>\n            ₹{item.price}\n          </span>\n          <Button\n            onClick={() => onAddToCart(item)}\n            size=\"sm\"\n            className=\"bg-primary text-primary-foreground w-8 h-8 rounded-full hover:bg-accent transition-colors p-0\"\n            data-testid={`button-add-to-cart-${item.id}`}\n          >\n            <Plus size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1532},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/creditor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CartItem } from \"@shared/schema\";\n\nexport default function CreditorPage() {\n  const [, navigate] = useLocation();\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [total, setTotal] = useState(0);\n  const [creditorName, setCreditorName] = useState(\"\");\n  const [paidAmount, setPaidAmount] = useState(\"\");\n  const [balanceAmount, setBalanceAmount] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const savedCart = localStorage.getItem(\"cart\");\n    if (savedCart) {\n      const cartItems: CartItem[] = JSON.parse(savedCart);\n      setCart(cartItems);\n      const calculatedTotal = cartItems.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);\n      setTotal(calculatedTotal);\n      setBalanceAmount(calculatedTotal.toString());\n    } else {\n      navigate(\"/menu\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const paid = parseFloat(paidAmount) || 0;\n    const balance = total - paid;\n    setBalanceAmount(balance.toFixed(2));\n  }, [paidAmount, total]);\n\n  const handleCreditorSale = async () => {\n    if (!creditorName.trim()) {\n      toast({\n        title: \"Creditor name required\",\n        description: \"Please enter the creditor's name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paid = parseFloat(paidAmount) || 0;\n    const balance = parseFloat(balanceAmount) || 0;\n\n    if (paid < 0 || balance < 0) {\n      toast({\n        title: \"Invalid amounts\",\n        description: \"Paid and balance amounts cannot be negative.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const now = new Date();\n      const transactionData = {\n        items: cart,\n        totalAmount: total.toFixed(2),\n        paymentMethod: \"creditor\" as const,\n        billerName: \"Sriram\",\n        date: now.toISOString().split('T')[0],\n        dayName: now.toLocaleDateString('en-US', { weekday: 'long' }),\n        time: now.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true }),\n        creditor: {\n          name: creditorName,\n          paidAmount: paid,\n          balanceAmount: balance,\n          totalAmount: total\n        }\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/transactions\", transactionData);\n      const transaction = await response.json();\n\n      localStorage.setItem(\"currentTransaction\", JSON.stringify(transaction));\n      localStorage.removeItem(\"cart\");\n\n      toast({\n        title: \"Creditor sale recorded\",\n        description: `Sale recorded for ${creditorName}. Balance: ₹${balance.toFixed(2)}`,\n      });\n\n      navigate(\"/invoice\");\n    } catch (error) {\n      toast({\n        title: \"Transaction failed\",\n        description: \"There was an error recording the creditor sale.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/payment\")}\n            className=\"mr-4 p-2 hover:bg-muted rounded-lg transition-colors\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"text-secondary\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-secondary\" data-testid=\"creditor-title\">Creditor Sale</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"creditor-subtitle\">Record sale for a creditor customer</p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Order Summary */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-secondary mb-4\" data-testid=\"order-summary-title\">Order Summary</h2>\n              \n              <div className=\"space-y-4 mb-6\">\n                {cart.map((item) => (\n                  <div \n                    key={item.id} \n                    className=\"flex justify-between items-center py-2 border-b border-border\"\n                    data-testid={`order-item-${item.id}`}\n                  >\n                    <div>\n                      <span className=\"font-medium text-secondary\" data-testid={`text-item-name-${item.id}`}>\n                        {item.name}\n                      </span>\n                      <span className=\"text-muted-foreground ml-2\" data-testid={`text-item-quantity-${item.id}`}>\n                        x{item.quantity}\n                      </span>\n                    </div>\n                    <span className=\"font-semibold text-primary\" data-testid={`text-item-total-${item.id}`}>\n                      ₹{(parseFloat(item.price) * item.quantity).toFixed(2)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"border-t border-border pt-4\">\n                <div className=\"flex justify-between items-center text-lg font-bold\">\n                  <span className=\"text-secondary\">Total</span>\n                  <span className=\"text-primary\" data-testid=\"text-total-amount\">₹{total.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Creditor Details */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-secondary mb-4\" data-testid=\"creditor-details-title\">Creditor Details</h2>\n              \n              <div className=\"space-y-4 mb-6\">\n                <div>\n                  <Label htmlFor=\"creditor-name\" className=\"block text-sm font-medium text-secondary mb-2\">\n                    Creditor Name\n                  </Label>\n                  <Input\n                    id=\"creditor-name\"\n                    type=\"text\"\n                    value={creditorName}\n                    onChange={(e) => setCreditorName(e.target.value)}\n                    placeholder=\"Enter creditor's name\"\n                    className=\"w-full\"\n                    data-testid=\"input-creditor-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"paid-amount\" className=\"block text-sm font-medium text-secondary mb-2\">\n                    Paid Amount\n                  </Label>\n                  <Input\n                    id=\"paid-amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={paidAmount}\n                    onChange={(e) => setPaidAmount(e.target.value)}\n                    placeholder=\"0.00\"\n                    className=\"w-full\"\n                    data-testid=\"input-paid-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"balance-amount\" className=\"block text-sm font-medium text-secondary mb-2\">\n                    Balance Amount\n                  </Label>\n                  <Input\n                    id=\"balance-amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={balanceAmount}\n                    readOnly\n                    className=\"w-full bg-muted\"\n                    data-testid=\"input-balance-amount\"\n                  />\n                </div>\n              </div>\n\n              <Button \n                onClick={handleCreditorSale}\n                className=\"w-full bg-primary text-primary-foreground py-4 rounded-lg font-semibold text-lg hover:bg-accent transition-colors\"\n                disabled={!creditorName.trim() || isProcessing}\n                data-testid=\"button-record-creditor-sale\"\n              >\n                <Save className=\"mr-2\" size={20} />\n                {isProcessing ? \"Recording...\" : \"Record Creditor Sale\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8475},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool  \n[ ] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":300},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, Save, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { MenuItem, InsertMenuItem } from \"@shared/schema\";\n\ninterface EditingMenuItem extends Partial<MenuItem> {\n  isEditing?: boolean;\n}\n\nexport default function AdminPage() {\n  const [editingItem, setEditingItem] = useState<EditingMenuItem | null>(null);\n  const [isAddingNew, setIsAddingNew] = useState(false);\n  const [newItem, setNewItem] = useState<InsertMenuItem>({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"Tea\",\n    image: \"\",\n    available: true,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: menuItems = [], isLoading } = useQuery<MenuItem[]>({\n    queryKey: [\"/api/menu\"],\n  });\n\n  const categories = [\"Tea\", \"Coffee\", \"Snacks\", \"Beverages\"];\n\n  const handleCreateItem = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/menu\", newItem);\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Menu item created successfully\",\n        });\n        setNewItem({\n          name: \"\",\n          description: \"\",\n          price: \"\",\n          category: \"Tea\",\n          image: \"\",\n          available: true,\n        });\n        setIsAddingNew(false);\n        queryClient.invalidateQueries({ queryKey: [\"/api/menu\"] });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create menu item\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateItem = async (id: string) => {\n    if (!editingItem) return;\n\n    try {\n      const response = await apiRequest(\"PUT\", `/api/menu/${id}`, editingItem);\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Menu item updated successfully\",\n        });\n        setEditingItem(null);\n        queryClient.invalidateQueries({ queryKey: [\"/api/menu\"] });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update menu item\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteItem = async (id: string) => {\n    if (confirm(\"Are you sure you want to mark this item as unavailable?\")) {\n      try {\n        const response = await apiRequest(\"DELETE\", `/api/menu/${id}`);\n        if (response.ok) {\n          toast({\n            title: \"Success\",\n            description: \"Menu item marked as unavailable\",\n          });\n          queryClient.invalidateQueries({ queryKey: [\"/api/menu\"] });\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete menu item\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const startEditing = (item: MenuItem) => {\n    setEditingItem({ ...item, isEditing: true });\n  };\n\n  const cancelEditing = () => {\n    setEditingItem(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading admin panel...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-secondary\">Admin Panel</h1>\n            <p className=\"text-muted-foreground\">Manage menu items and operations</p>\n          </div>\n          <Button\n            onClick={() => setIsAddingNew(true)}\n            className=\"bg-primary text-primary-foreground\"\n            disabled={isAddingNew}\n          >\n            <Plus className=\"mr-2\" size={20} />\n            Add New Item\n          </Button>\n        </div>\n\n        {/* Add New Item Form */}\n        {isAddingNew && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Add New Menu Item</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"new-name\">Name</Label>\n                  <Input\n                    id=\"new-name\"\n                    value={newItem.name}\n                    onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}\n                    placeholder=\"Enter item name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"new-price\">Price (₹)</Label>\n                  <Input\n                    id=\"new-price\"\n                    value={newItem.price}\n                    onChange={(e) => setNewItem({ ...newItem, price: e.target.value })}\n                    placeholder=\"Enter price\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"new-category\">Category</Label>\n                  <select\n                    id=\"new-category\"\n                    value={newItem.category}\n                    onChange={(e) => setNewItem({ ...newItem, category: e.target.value })}\n                    className=\"w-full p-2 border border-border rounded-md\"\n                  >\n                    {categories.map((category) => (\n                      <option key={category} value={category}>\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <Label htmlFor=\"new-image\">Image URL</Label>\n                  <Input\n                    id=\"new-image\"\n                    value={newItem.image}\n                    onChange={(e) => setNewItem({ ...newItem, image: e.target.value })}\n                    placeholder=\"Enter image URL\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"new-description\">Description</Label>\n                  <Input\n                    id=\"new-description\"\n                    value={newItem.description}\n                    onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}\n                    placeholder=\"Enter description\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2 mt-4\">\n                <Button\n                  onClick={() => setIsAddingNew(false)}\n                  variant=\"outline\"\n                >\n                  <X className=\"mr-2\" size={16} />\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateItem}\n                  className=\"bg-primary text-primary-foreground\"\n                  disabled={!newItem.name || !newItem.price}\n                >\n                  <Save className=\"mr-2\" size={16} />\n                  Save Item\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Menu Items Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Menu Items ({menuItems.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-2\">Image</th>\n                    <th className=\"text-left p-2\">Name</th>\n                    <th className=\"text-left p-2\">Description</th>\n                    <th className=\"text-left p-2\">Price</th>\n                    <th className=\"text-left p-2\">Category</th>\n                    <th className=\"text-left p-2\">Status</th>\n                    <th className=\"text-left p-2\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {menuItems.map((item) => (\n                    <tr key={item.id} className=\"border-b\">\n                      <td className=\"p-2\">\n                        <img\n                          src={item.image}\n                          alt={item.name}\n                          className=\"w-12 h-12 object-cover rounded\"\n                        />\n                      </td>\n                      <td className=\"p-2\">\n                        {editingItem?.id === item.id ? (\n                          <Input\n                            value={editingItem.name}\n                            onChange={(e) => setEditingItem({ ...editingItem, name: e.target.value })}\n                            className=\"w-full\"\n                          />\n                        ) : (\n                          <span className=\"font-semibold\">{item.name}</span>\n                        )}\n                      </td>\n                      <td className=\"p-2 max-w-xs\">\n                        {editingItem?.id === item.id ? (\n                          <Input\n                            value={editingItem.description}\n                            onChange={(e) => setEditingItem({ ...editingItem, description: e.target.value })}\n                            className=\"w-full\"\n                          />\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground truncate\">\n                            {item.description}\n                          </span>\n                        )}\n                      </td>\n                      <td className=\"p-2\">\n                        {editingItem?.id === item.id ? (\n                          <Input\n                            value={editingItem.price}\n                            onChange={(e) => setEditingItem({ ...editingItem, price: e.target.value })}\n                            className=\"w-20\"\n                          />\n                        ) : (\n                          <span className=\"font-bold text-primary\">₹{item.price}</span>\n                        )}\n                      </td>\n                      <td className=\"p-2\">\n                        {editingItem?.id === item.id ? (\n                          <select\n                            value={editingItem.category}\n                            onChange={(e) => setEditingItem({ ...editingItem, category: e.target.value })}\n                            className=\"p-1 border border-border rounded\"\n                          >\n                            {categories.map((category) => (\n                              <option key={category} value={category}>\n                                {category}\n                              </option>\n                            ))}\n                          </select>\n                        ) : (\n                          <span className=\"text-sm\">{item.category}</span>\n                        )}\n                      </td>\n                      <td className=\"p-2\">\n                        <span\n                          className={`px-2 py-1 rounded text-xs ${\n                            item.available\n                              ? \"bg-green-100 text-green-800\"\n                              : \"bg-red-100 text-red-800\"\n                          }`}\n                        >\n                          {item.available ? \"Available\" : \"Unavailable\"}\n                        </span>\n                      </td>\n                      <td className=\"p-2\">\n                        <div className=\"flex gap-1\">\n                          {editingItem?.id === item.id ? (\n                            <>\n                              <Button\n                                onClick={() => handleUpdateItem(item.id)}\n                                size=\"sm\"\n                                className=\"bg-green-500 hover:bg-green-600 text-white\"\n                              >\n                                <Save size={14} />\n                              </Button>\n                              <Button\n                                onClick={cancelEditing}\n                                size=\"sm\"\n                                variant=\"outline\"\n                              >\n                                <X size={14} />\n                              </Button>\n                            </>\n                          ) : (\n                            <>\n                              <Button\n                                onClick={() => startEditing(item)}\n                                size=\"sm\"\n                                variant=\"outline\"\n                              >\n                                <Edit size={14} />\n                              </Button>\n                              <Button\n                                onClick={() => handleDeleteItem(item.id)}\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"text-red-600 hover:text-red-700\"\n                              >\n                                <Trash2 size={14} />\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13766}},"version":1}